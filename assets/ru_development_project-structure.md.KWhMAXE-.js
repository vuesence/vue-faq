import{_ as s,o as n,c as a,a4 as p,a7 as e,a8 as l,a9 as t}from"./chunks/framework.B8KxSsRZ.js";import{_ as i}from"./chunks/modular-architecture.C9UloQkF.js";const P=JSON.parse('{"title":"Структура Vue 3 проекта","description":"","frontmatter":{},"headers":[],"relativePath":"ru/development/project-structure.md","filePath":"ru/development/project-structure.md","lastUpdated":1728438031000}'),c={name:"ru/development/project-structure.md"},o=p(`<h1 id="структура-vue-3-проекта" tabindex="-1">Структура Vue 3 проекта <a class="header-anchor" href="#структура-vue-3-проекта" aria-label="Permalink to &quot;Структура Vue 3 проекта&quot;">​</a></h1><h2 id="какие-бывают-структуры-фаилов-для-vue-3-проектов" tabindex="-1">Какие бывают структуры файлов для Vue 3 проектов? <a class="header-anchor" href="#какие-бывают-структуры-фаилов-для-vue-3-проектов" aria-label="Permalink to &quot;Какие бывают структуры файлов для Vue 3 проектов?&quot;">​</a></h2><details class="details custom-block"><summary>Плоская структура</summary><p>При запуске небольшого проекта Vue, такого как Proof of Concept, вы можете предпочесть простую структуру папок, чтобы избежать сложностей:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/src</span></span>
<span class="line"><span>|-- /components</span></span>
<span class="line"><span>|   |-- BaseButton.vue</span></span>
<span class="line"><span>|   |-- BaseCard.vue</span></span>
<span class="line"><span>|   |-- PokemonList.vue</span></span>
<span class="line"><span>|   |-- PokemonCard.vue</span></span>
<span class="line"><span>|-- /composables</span></span>
<span class="line"><span>|   |-- usePokemon.js</span></span>
<span class="line"><span>|-- /utils</span></span>
<span class="line"><span>|   |-- validators.js</span></span>
<span class="line"><span>|-- /layout</span></span>
<span class="line"><span>|   |-- DefaultLayout.vue</span></span>
<span class="line"><span>|   |-- AdminLayout.vue</span></span>
<span class="line"><span>|-- /plugins</span></span>
<span class="line"><span>|   |-- translate.js</span></span>
<span class="line"><span>|-- /views</span></span>
<span class="line"><span>|   |-- Home.vue</span></span>
<span class="line"><span>|   |-- PokemonDetail.vue</span></span>
<span class="line"><span>|-- /router</span></span>
<span class="line"><span>|   |-- index.js</span></span>
<span class="line"><span>|-- /store</span></span>
<span class="line"><span>|   |-- index.js</span></span>
<span class="line"><span>|-- /assets</span></span>
<span class="line"><span>|   |-- /images</span></span>
<span class="line"><span>|   |-- /styles</span></span>
<span class="line"><span>|-- /tests</span></span>
<span class="line"><span>|   |-- ...</span></span>
<span class="line"><span>|-- App.vue</span></span>
<span class="line"><span>|-- main.js</span></span></code></pre></div></details><details class="details custom-block"><summary>Атомарный дизайн</summary><p>Для больших приложений Vue может оказаться полезным использование методологии Atomic Design. Этот подход организует компоненты в иерархию от самого простого к самому сложному:</p><ul><li>Атомы: Базовые элементы (например, кнопки, иконки).</li><li>Молекулы: Группы атомов (например, строки поиска).</li><li>Организмы: Сложные компоненты (например, панели навигации)</li><li>Шаблоны: Макеты, отображающие структуру компонентов</li><li>Страницы: Реальные экраны пользовательского интерфейса с реальными данными.</li></ul><p>Этот метод обеспечивает масштабируемость и поддерживаемость, облегчая плавный переход от простых к сложным компонентам.</p><p><img src="`+e+`" alt="image"></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/src</span></span>
<span class="line"><span>|-- /components</span></span>
<span class="line"><span>|   |-- /atoms</span></span>
<span class="line"><span>|   |   |-- AtomButton.vue</span></span>
<span class="line"><span>|   |   |-- AtomIcon.vue</span></span>
<span class="line"><span>|   |-- /molecules</span></span>
<span class="line"><span>|   |   |-- MoleculeSearchInput.vue</span></span>
<span class="line"><span>|   |   |-- MoleculePokemonThumbnail.vue</span></span>
<span class="line"><span>|   |-- /organisms</span></span>
<span class="line"><span>|   |   |-- OrganismPokemonCard.vue</span></span>
<span class="line"><span>|   |   |-- OrganismHeader.vue</span></span>
<span class="line"><span>|   |-- /templates</span></span>
<span class="line"><span>|   |   |-- TemplatePokemonList.vue</span></span>
<span class="line"><span>|   |   |-- TemplatePokemonDetail.vue</span></span>
<span class="line"><span>|-- /pages</span></span>
<span class="line"><span>|   |-- PageHome.vue</span></span>
<span class="line"><span>|   |-- PagePokemonDetail.vue</span></span>
<span class="line"><span>|-- /composables</span></span>
<span class="line"><span>|   |-- usePokemon.js</span></span>
<span class="line"><span>|-- /utils</span></span>
<span class="line"><span>|   |-- validators.js</span></span>
<span class="line"><span>|-- /layout</span></span>
<span class="line"><span>|   |-- LayoutDefault.vue</span></span>
<span class="line"><span>|   |-- LayoutAdmin.vue</span></span>
<span class="line"><span>|-- /plugins</span></span>
<span class="line"><span>|   |-- translate.js</span></span>
<span class="line"><span>|-- /router</span></span>
<span class="line"><span>|   |-- index.js</span></span>
<span class="line"><span>|-- /store</span></span>
<span class="line"><span>|   |-- index.js</span></span>
<span class="line"><span>|-- /assets</span></span>
<span class="line"><span>|   |-- /images</span></span>
<span class="line"><span>|   |-- /styles</span></span>
<span class="line"><span>|-- /tests</span></span>
<span class="line"><span>|   |-- ...</span></span>
<span class="line"><span>|-- App.vue</span></span>
<span class="line"><span>|-- main.js</span></span></code></pre></div></details><details class="details custom-block"><summary>Модульный дизайн</summary><p>Модульная архитектура инкапсулирует каждую функцию или предметную область, повышая поддерживаемость и готовя к потенциальной эволюции в сторону микрофронтендов:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/src</span></span>
<span class="line"><span>|-- /core</span></span>
<span class="line"><span>|   |-- /components</span></span>
<span class="line"><span>|   |   |-- BaseButton.vue</span></span>
<span class="line"><span>|   |   |-- BaseIcon.vue</span></span>
<span class="line"><span>|   |-- /models</span></span>
<span class="line"><span>|   |-- /store</span></span>
<span class="line"><span>|   |-- /services</span></span>
<span class="line"><span>|   |-- /views</span></span>
<span class="line"><span>|   |   |-- DefaultLayout.vue</span></span>
<span class="line"><span>|   |   |-- AdminLayout.vue</span></span>
<span class="line"><span>|   |-- /utils</span></span>
<span class="line"><span>|   |   |-- validators.js</span></span>
<span class="line"><span>|-- /modules</span></span>
<span class="line"><span>|   |-- /pokemon</span></span>
<span class="line"><span>|   |   |-- /components</span></span>
<span class="line"><span>|   |   |   |-- PokemonThumbnail.vue</span></span>
<span class="line"><span>|   |   |   |-- PokemonCard.vue</span></span>
<span class="line"><span>|   |   |   |-- PokemonListTemplate.vue</span></span>
<span class="line"><span>|   |   |   |-- PokemonDetailTemplate.vue</span></span>
<span class="line"><span>|   |   |-- /models</span></span>
<span class="line"><span>|   |   |-- /store</span></span>
<span class="line"><span>|   |   |   |-- pokemonStore.js</span></span>
<span class="line"><span>|   |   |-- /services</span></span>
<span class="line"><span>|   |   |-- /views</span></span>
<span class="line"><span>|   |   |   |-- PokemonDetailPage.vue</span></span>
<span class="line"><span>|   |   |-- /tests</span></span>
<span class="line"><span>|   |   |   |-- pokemonTests.spec.js</span></span>
<span class="line"><span>|   |-- /search</span></span>
<span class="line"><span>|   |   |-- /components</span></span>
<span class="line"><span>|   |   |   |-- SearchInput.vue</span></span>
<span class="line"><span>|   |   |-- /models</span></span>
<span class="line"><span>|   |   |-- /store</span></span>
<span class="line"><span>|   |   |   |-- searchStore.js</span></span>
<span class="line"><span>|   |   |-- /services</span></span>
<span class="line"><span>|   |   |-- /views</span></span>
<span class="line"><span>|   |   |-- /tests</span></span>
<span class="line"><span>|   |   |   |-- searchTests.spec.js</span></span>
<span class="line"><span>|-- /assets</span></span>
<span class="line"><span>|   |-- /images</span></span>
<span class="line"><span>|   |-- /styles</span></span>
<span class="line"><span>|-- /scss</span></span>
<span class="line"><span>|-- App.vue</span></span>
<span class="line"><span>|-- main.ts</span></span>
<span class="line"><span>|-- router.ts</span></span>
<span class="line"><span>|-- store.ts</span></span>
<span class="line"><span>|-- /tests</span></span>
<span class="line"><span>|   |-- ...</span></span>
<span class="line"><span>|-- /plugins</span></span>
<span class="line"><span>|   |-- translate.js</span></span></code></pre></div></details><details class="details custom-block"><summary>Feature Sliced Design</summary><p>Feature-Sliced Design - это способ организации больших и долгосрочных проектов, чтобы ими было легче управлять и развивать. При таком подходе приложение разбивается на различные слои, каждый из которых играет определенную роль:</p><ul><li>App: Приложение: Глобальные настройки, стили и провайдеры.</li><li>Pages: Создание полноценных страниц с использованием сущностей, функций и виджетов.</li><li>Widgets: Объединяют сущности и функции в целостные блоки пользовательского интерфейса, например IssueList или UserProfile.</li><li>Features: Обрабатывают пользовательские взаимодействия, которые представляют ценность, такие как отправка комментариев, добавление в корзину или поиск пользователей.</li><li>Entities: Представляют основные бизнес-модели, такие как пользователь, продукт и заказ.</li><li>Shared: Предоставляет многократно используемые утилиты и компоненты, не связанные с конкретной бизнес-логикой, такие как UIKit, библиотеки и API.</li></ul><p><img src="`+l+`" alt="image"></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/src</span></span>
<span class="line"><span>|-- /app</span></span>
<span class="line"><span>|   |-- App.vue</span></span>
<span class="line"><span>|   |-- main.js</span></span>
<span class="line"><span>|   |-- app.scss</span></span>
<span class="line"><span>|-- /processes</span></span>
<span class="line"><span>|-- /pages</span></span>
<span class="line"><span>|   |-- Home.vue</span></span>
<span class="line"><span>|   |-- PokemonDetailPage.vue</span></span>
<span class="line"><span>|-- /widgets</span></span>
<span class="line"><span>|   |-- UserProfile.vue</span></span>
<span class="line"><span>|   |-- PokemonStatsWidget.vue</span></span>
<span class="line"><span>|-- /features</span></span>
<span class="line"><span>|   |-- pokemon</span></span>
<span class="line"><span>|   |   |-- CatchPokemon.vue</span></span>
<span class="line"><span>|   |   |-- PokemonList.vue</span></span>
<span class="line"><span>|   |-- user</span></span>
<span class="line"><span>|   |   |-- Login.vue</span></span>
<span class="line"><span>|   |   |-- Register.vue</span></span>
<span class="line"><span>|-- /entities</span></span>
<span class="line"><span>|   |-- user</span></span>
<span class="line"><span>|   |   |-- userService.js</span></span>
<span class="line"><span>|   |   |-- userModel.js</span></span>
<span class="line"><span>|   |-- pokemon</span></span>
<span class="line"><span>|   |   |-- pokemonService.js</span></span>
<span class="line"><span>|   |   |-- pokemonModel.js</span></span>
<span class="line"><span>|-- /shared</span></span>
<span class="line"><span>|   |-- ui</span></span>
<span class="line"><span>|   |   |-- BaseButton.vue</span></span>
<span class="line"><span>|   |   |-- BaseInput.vue</span></span>
<span class="line"><span>|   |   |-- Loader.vue</span></span>
<span class="line"><span>|   |-- lib</span></span>
<span class="line"><span>|   |   |-- api.js</span></span>
<span class="line"><span>|   |   |-- helpers.js</span></span>
<span class="line"><span>|-- /assets</span></span>
<span class="line"><span>|   |-- /images</span></span>
<span class="line"><span>|   |-- /styles</span></span>
<span class="line"><span>|-- /router</span></span>
<span class="line"><span>|   |-- index.js</span></span>
<span class="line"><span>|-- /store</span></span>
<span class="line"><span>|   |-- index.js</span></span>
<span class="line"><span>|-- /tests</span></span>
<span class="line"><span>|   |-- featureTests.spec.js</span></span></code></pre></div></details><details class="details custom-block"><summary>Микрофронтенды</summary><p>Микрофронтенды берут за основу идею микросервисов и применяют ее к фронтенд-части веб-приложений. Это означает, что разные команды могут работать над разными разделами веб-приложения, не мешая друг другу. Каждый раздел, или «микрофронтенд», работает сам по себе и может изменяться независимо. Вот базовый обзор SPA.</p><ul><li>Оболочка приложения: Это основной контроллер, который управляет базовой версткой и маршрутизацией сайта. Он соединяет все микрофронтенды вместе.</li><li>Декомпозированные пользовательские интерфейсы: Каждый микрофронтенд фокусируется на определенной части приложения. Они могут быть разработаны с использованием разных технологий и обновляться отдельно.</li></ul><p><img src="`+t+'" alt="image"></p><p>Основное преимущество заключается в том, что микрофронтенды позволяют командам обновлять отдельные части приложения, не дожидаясь остальных, что ускоряет разработку. Однако такая настройка может сделать приложение более сложным в управлении и поддержании последовательности.</p><p>Полезные ресурсы:</p><ul><li><a href="https://micro-frontends.org/" target="_blank" rel="noreferrer">Micro Frontends - Extending Microservice Ideas to Frontend Development</a></li><li><a href="https://martinfowler.com/articles/micro-frontends.html" target="_blank" rel="noreferrer">Martin Fowler on Microfrontends</a></li></ul><p>Эта стратегия подходит для крупных, сложных проектов с несколькими командами разработчиков. Каждая команда может сосредоточиться на конкретных бизнес-требованиях, не влияя на работу других, и потенциально использовать технологии, которые лучше всего подходят для их части приложения.</p></details><details class="details custom-block"><summary>Сравнительная таблица</summary><table><thead><tr><th>Подход</th><th>Описание</th><th>Плюсы</th><th>Минусы</th></tr></thead><tbody><tr><td><strong>Плоский подход</strong></td><td>Простая структура, идеально подходящая для небольших проектов или проверки концепции.</td><td>- Простота реализации <br>- Минимальная настройка</td><td>- Не масштабируется <br>- Беспорядок по мере роста проекта</td></tr><tr><td><strong>Атомный дизайн</strong></td><td>Иерархическая структура, основанная на сложности компонентов.</td><td>- Масштабируемые <br>- Организованные <br>- Многоразовые компоненты</td><td>- Накладные расходы на управление слоями <br>- Сложная настройка</td></tr><tr><td><strong>Модули</strong></td><td>Модульная структура, инкапсулирующая функции.</td><td>- Масштабируемость <br>- Инкапсулированные функции</td><td>- Возможное дублирование <br>- Может стать сложным</td></tr><tr><td><strong>FSD</strong></td><td>Организует проект по функциональным слоям и фрагментам.</td><td>- Высокая сплоченность <br>- Четкое разделение функций</td><td>- Начальная сложность <br>- Требует тщательного планирования</td></tr><tr><td><strong>Микрофронтенды</strong></td><td>Каждая часть приложения развертывается отдельно.</td><td>- Независимые развертывания <br>- Масштабируемость</td><td>- Высокая сложность <br>- Необходима координация между командами</td></tr></tbody></table><p>(с) <a href="https://dev.to/alexanderop/how-to-structure-vue-projects-20i4" target="_blank" rel="noreferrer">source</a></p></details><h2 id="подходящая-структура-для-vue-3-проекта" tabindex="-1">Подходящая структура для Vue 3 проекта <a class="header-anchor" href="#подходящая-структура-для-vue-3-проекта" aria-label="Permalink to &quot;Подходящая структура для Vue 3 проекта&quot;">​</a></h2><p>Самая удобная архитектура для Vue 3 приложения - <code>Модульная</code>.</p><p>Изначально, приложение разбивается на логические модули, слабо связанные друг с другом. Например, для онлайн магазина это могут быть модуль каталога товаров, модуль отдельного товара, модуль личного кабинета / аккаунта пользователя.</p><p>Кроме того, есть модуль оболочки - то, что иногда называет <code>app shell</code>. Шаблон с хедером, футером, боковым меню и главным окном. В этот модуль целесообразно поместить утилиты и ресурсы, используемые по всему приложению - например, <code>api</code>, <code>useI18n</code>, <code>BaseButton</code> и <code>stringHelpers</code>.</p><p>В каждом модуле свои <code>components</code>, <code>composables</code>, <code>assets</code>, <code>utils</code>; возможно, <code>api</code>, <code>routes</code>, <code>views</code>, <code>layouts</code>.</p><p>Внутри <code>components</code> каждого модуля при необходимости можно устроить иерархию компонентов наподобие <code>атомарного дизайна</code></p><p>Слабая связанность позволяет разрабатывать каждый модуль достаточно независимо, что значительно повышает вероятность успешности проекта.</p><p><code>Плоская структура</code> - вырожденная форма модульной с одним модулем. В то же время модульная структура органично перерастает при необходимости в <code>Микрофронтенды</code>.</p><p><img src="'+i+'" alt="image"></p><p><code>Атомарный дизайн</code> и <code>FSD</code> изобретались не для Vue, а для фронтенда в целом, в следствие чего содержат избыточную сложность и неудобства.</p>',18),r=[o];function d(u,m,v,h,g,b){return n(),a("div",null,r)}const y=s(c,[["render",d]]);export{P as __pageData,y as default};
