import{_ as e,c as t,o as i,ah as l}from"./chunks/framework.CH-e-O8w.js";const r="/assets/divide-et-impera.CvdcY0Gi.webp",o="/assets/package-diagram.kylqtaRs.jpg",s="/assets/three-tier-architecture.BOGJQRyn.png",_=JSON.parse('{"title":"Архитектура и дизайн","description":"","frontmatter":{"pageClass":"arty-crafty","head":[["meta",{"name":"og:site_name","content":"Arty-Crafty - проект онлайн магазина"}],["meta",{"name":"og:image","content":"/images/arty-crafty-logo.png"}],["meta",{"name":"twitter:image","content":"/images/arty-crafty-logo.png"}]]},"headers":[],"relativePath":"ru/arty-crafty/analysis/architecture-and-design.md","filePath":"ru/arty-crafty/analysis/architecture-and-design.md","lastUpdated":1738480879000}'),c={name:"ru/arty-crafty/analysis/architecture-and-design.md"};function n(p,a,d,m,u,h){return i(),t("div",null,a[0]||(a[0]=[l('<h1 id="архитектура-и-дизаин" tabindex="-1">Архитектура и дизайн <a class="header-anchor" href="#архитектура-и-дизаин" aria-label="Permalink to &quot;Архитектура и дизайн&quot;">​</a></h1><h2 id="упрощение-сложного" tabindex="-1">Упрощение сложного <a class="header-anchor" href="#упрощение-сложного" aria-label="Permalink to &quot;Упрощение сложного&quot;">​</a></h2><p>Самое главное правило при проектировании любых систем - KISS (keep it simple, stupid). Более благозвучно это формулируется как: <em>&quot;Всё гениальное просто&quot;</em>.</p><p>Для того, чтобы управлять сложными системами, издревле люди стали разбивать их на более простые. Принцип: &quot;Разделяй и властвуй&quot;, относится именно к этому.</p><p><img src="'+r+'" alt="image"></p><p>Любое современное государство управляется через иерархичное разбиение и подчинение, давая возможность любому управляющему быть ответственным за небольшую часть системы, которую он может контролировать.</p><p>Аналогично программная система любой сложности может быть разбита на отдельные подсистемы. Чем менее две таких подсистемы будут связаны друг с другом (loosely coupled), тем проще с ними будет работать, исправлять баги, вводить в курс новых разработчиков.</p><h2 id="абстракция-и-инкапсуляция" tabindex="-1">Абстракция и инкапсуляция <a class="header-anchor" href="#абстракция-и-инкапсуляция" aria-label="Permalink to &quot;Абстракция и инкапсуляция&quot;">​</a></h2><p>Эти два метода объектно-ориентированного программирования хорошо действуют и здесь в веб разработке на Vue, для определения функциональных границ подсистем, и данных, которыми они обменивается между собой и с окружающим миром.</p><p>Например, у нас на фронтенде будет два представления на экране (<code>views</code>) - категория товара и сам товар. Кажется, что они связаны друг с другом, потому что оперируют одними сущностями, но на самом деле они вообще никак не связаны (если отвлечься от визуального вида). Каждое получает свои данные с бэкенда. Когда происходит клик на какой-либо товар в списке категории, то <code>id</code> товара отправляется во <code>vue-router</code>, который уже вызывает страницу товара с нужным <code>id</code>.</p><p>То же самое в паре меню категорий и самого представления категории с товарами. Меню категорий может быть довольно сложным, и вынести его в отдельную подсистему тогда будет полезно.</p><p>Это пример, как можно разбивать систему на несвязанные (или слабосвязанные) подсистемы, что очень сильно облегчает дальнейшую разработку.</p><h2 id="разбиение-проекта-на-подсистемы" tabindex="-1">Разбиение проекта на подсистемы <a class="header-anchor" href="#разбиение-проекта-на-подсистемы" aria-label="Permalink to &quot;Разбиение проекта на подсистемы&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">Замечание</p><p>Иногда будут вставать вопросы, над которыми читателю полезно подумать самому. В таких случаях, я буду формулировать вопрос, а свой ответ прятать под спойлер. Ваш вариант ответа вполне может оказаться полней и точней.</p></div><p>Вопрос: на какие слабосвязанные подсистемы можно разбить наш проект маркетплейса? Имеется ввиду только фронтенд. Предлагаю взять для примера <a href="https://ozon.ru" target="_blank" rel="noreferrer">Озон</a> и исследовать его.</p><details class="details custom-block"><summary>Вариант ответа</summary><ul><li>Меню категорий</li><li>Фильтры поиска</li><li>Представление категории товара</li><li>Представление товара</li><li>Секция &quot;Похожие товары&quot;</li><li>Отзывы о товаре</li><li>Рекламные баннеры</li><li>Блоки спецпредложений и рекомендаций</li><li>Вспомогательные страницы (подарочные сертификаты, акции и т.п.)</li><li>Сравнение товаров</li><li>Избранное</li><li>Заказы</li><li>Страница профиля</li><li>Корзина</li><li>Модуль оплаты</li><li>Модуль выбора вида доставки</li><li>Локация пункта выдачи</li><li>и ещё другие</li></ul></details><h2 id="package-diagram" tabindex="-1">Package Diagram <a class="header-anchor" href="#package-diagram" aria-label="Permalink to &quot;Package Diagram&quot;">​</a></h2><p>Примерный вид диаграммы пакетов:</p><p><img src="'+o+'" alt="image"></p><p>Пакеты здесь аналоги будущих модулей в нашем приложении.</p><h2 id="клиент-серверная-архитектура" tabindex="-1">Клиент-серверная архитектура <a class="header-anchor" href="#клиент-серверная-архитектура" aria-label="Permalink to &quot;Клиент-серверная архитектура&quot;">​</a></h2><p>Архитектурно приложение будет являться классическим трехуровневых приложением - фронтенд, бэкенд, база данных. На первом этапе бэкенд и база данных представляют собой статичные json файлы. Затем за них будет отвечать Headless CMS</p><p>В связи с тем, что мы разрабатываем SPA, часть бизнес логики будет на фронтенде.</p><p><img src="'+s+'" alt="image"></p><h2 id="routing" tabindex="-1">Routing <a class="header-anchor" href="#routing" aria-label="Permalink to &quot;Routing&quot;">​</a></h2><p>Роутинг используется в том числе и для того, чтобы сделать наши подсистемы слабосвязанными.</p><p>На первом этапе нам нужны три маршрута:</p><ul><li>главная страница</li><li>товары определенной категории</li><li>страница определенного товара</li></ul><p>Для простоты главную страницу оставим пустой.</p>',29)]))}const f=e(c,[["render",n]]);export{_ as __pageData,f as default};
