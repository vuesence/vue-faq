import{_ as i,c as a,o as n,ah as t}from"./chunks/framework.CH-e-O8w.js";const p="/assets/Figure_6.01_B18602.CRzV52bD.jpg",l="/assets/Figure_6.02_B18602.7tBnMfnU.jpg",h="/assets/Figure_6.03_B18602.DzWeXQ7D.jpg",e="/assets/Figure_6.04_B18602.CXYEjuJn.jpg",k="/assets/Figure_6.05_B18602.B30q4bXz.jpg",r="/assets/Figure_6.06_B18602.DEoZmeKA.jpg",E="/assets/Figure_6.07_B18602.TpFAbL_Y.jpg",o="/assets/Figure_6.08_B18602.DeppM780.jpg",C=JSON.parse('{"title":"Прогрессивные веб-приложения","description":"Учебник по Vue.js 3","frontmatter":{"pageClass":"textbook","head":[["meta",{"name":"og:site_name","content":"Vue.js 3 - Шаблоны проектирования и лучшие практики"}],["meta",{"name":"description","content":"Учебник по Vue.js 3"}],["meta",{"name":"og:image","content":"/images/book-face.jpg"}],["meta",{"name":"twitter:image","content":"/images/book-face.jpg"}]]},"headers":[],"relativePath":"ru/book/Chapter_6__Progressive_Web_Applications.md","filePath":"ru/book/Chapter_6__Progressive_Web_Applications.md","lastUpdated":1738480879000}'),g={name:"ru/book/Chapter_6__Progressive_Web_Applications.md"};function d(y,s,F,c,u,m){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="прогрессивные-веб-приложения" tabindex="-1">Прогрессивные веб-приложения <a class="header-anchor" href="#прогрессивные-веб-приложения" aria-label="Permalink to &quot;Прогрессивные веб-приложения&quot;">​</a></h1><p>В этой главе мы познакомимся со следующим шагом эволюции веб-приложений: <strong>прогрессивные веб-приложения</strong> (<strong>PWA</strong>). Этот термин может показаться недостаточно описательным, но он относится к группе технологий, которые создают общую концепцию и могут быть реализованы постепенно или частично.</p><p>Основная идея заключается в том, чтобы вывести веб-приложение из контекста браузера и реализовать его на любом типе устройства, чтобы оно действовало и вело себя максимально похоже на нативное приложение. Это достигается за счет внедрения новых API в браузерные движки, а также интеграции с наиболее популярными операционными системами для настольных и мобильных устройств.</p><p>Отправной точкой для PWA, конечно же, является <strong>одностраничное приложение (SPA)</strong>.</p><p>К концу этой главы мы узнаем следующее:</p><ul><li>Что превращает SPA в PWA, и какие технологии при этом используются</li><li>Как вручную реализовать адаптивный SPA, файл манифеста, web workers, автономное хранилище и так далее</li><li>Что такое <em>service workers</em> и какие они бывают</li><li>Как использовать плагины Vite для автоматизации создания PWA</li><li>Как проверить готовность приложения с помощью <em>Google Lighthouse</em></li></ul><p>Из предыдущего списка мы сосредоточимся на изучении развертывания начальных шаблонов для нескольких технологий, закладывающих основу для их последующего использования, подробно реализованного в главе 7, <em>Управление потоками данных</em>, и главе 8, <em>Многопоточность с Web Workers</em>. К концу этих глав вы будете знать, как создавать PWA, которые эффективно используют современные вычислительные мощности, делая их отзывчивыми, надежными, и производительными.</p><h2 id="технические-требования" tabindex="-1">Технические требования <a class="header-anchor" href="#технические-требования" aria-label="Permalink to &quot;Технические требования&quot;">​</a></h2><p>Для работы с этой главой вам понадобятся примеры кода, расположенные в репозитории по адресу <a href="https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter06" target="_blank" rel="noreferrer">https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter06</a>.</p><p>Текстовых примеров кода в этом разделе может быть недостаточно для создания работающего примера без дополнительного кода из репозитория.</p><p>Посмотрите следующее <a href="https://packt.link/SBZys" target="_blank" rel="noreferrer">видео</a>, чтобы увидеть код в действии:</p><h2 id="pwa-или-устанавливаемые-spa" tabindex="-1">PWA или устанавливаемые SPA <a class="header-anchor" href="#pwa-или-устанавливаемые-spa" aria-label="Permalink to &quot;PWA или устанавливаемые SPA&quot;">​</a></h2><p>PWA - это не отдельная настройка или технология, а систематическое усовершенствование веб-приложения для соблюдения определенных условий, будь то <strong>многостраничное приложение</strong> (<strong>MPA</strong>) или SPA. Однако по-настоящему они проявляются и оживают, когда эти технологии применяются к SPA, давая нам мощные приложения, которые стирают грань между онлайном и оффлайном, настольными и веб-приложениями.</p><p>Термин <strong>прогрессивный</strong>, используемый здесь, имеет тот же оттенок, который мы обсуждали ранее применительно к фреймворку Vue - постепенное применение веб-технологий.</p><p>PWA несколько по-особому воспринимаются браузерами и операционными системами. Они могут устанавливаться рядом с &quot;родными&quot; или настольными приложениями и управлять сетевыми коммуникациями (отправлять, получать, кэшировать файлы и даже получать push-уведомления с сервера).</p><p>Здесь важно отметить, что речь идет уже не только о настольных компьютерах, но и о мобильных устройствах, таких как планшеты и телефоны, а также о различных операционных системах. Именно в связи с такой многоплатформенностью, если предполагается охватить базу пользователей на различных устройствах, необходимо уделить особое внимание использованию специальных правил CSS для адаптации пользовательского интерфейса к различным размерам (так называемые <strong>отзывчивые (responsive) приложения</strong>), различных иконок и цветов для согласования с локальными настройками пользователя на уровне операционной системы (например, светлый и темный режимы) и т.д.</p><p>Кроме того, PWA имеют возможность (как и SPA) хранить контент для автономного использования и, надеюсь, должны предоставлять определенную функциональность для автономного использования. Для выполнения всего этого, как минимум, PWA должен соответствовать следующим требованиям:</p><ul><li>Веб-приложение должно обслуживаться через защищенное соединение (HTTPS).</li><li>Приложение должно предоставлять файл манифеста.</li><li>Приложение должно предоставить и установить service worker.</li></ul><p>При выполнении всех этих условий браузер или операционная система могут предложить пользователю &quot;установить&quot; приложение. Если пользователь соглашается, то с помощью файла манифеста настраивается внешний вид приложения в соответствии с локальной операционной системой (значки, названия, цвета и т.д.), и оно появляется рядом с другими приложениями в системе.</p><p>При запуске оно будет открываться в собственном окне (если оно выбрано) вне рамок веб-браузера, как и обычное &quot;родное&quot; приложение. Внутри приложение по-прежнему будет работать на движке браузера с использованием веб-технологий, но предполагается, что это будет прозрачно для пользователя, обеспечивая лучшее из двух миров.</p><p>Есть вероятность того, что пользователь, сам того не зная, использует PWA вместо обычных приложений. Успешными примерами такого подхода являются Starbucks, Trivago и Tinder (<a href="https://medium.com/@addyosmani/a-tinder-progressive-web-app-performance-case-study-78919d98ece0" target="_blank" rel="noreferrer">https://medium.com/@addyosmani/a-tinder-progressive-web-app-performance-case-study-78919d98ece0</a>).</p><p>Это создает целый ряд преимуществ, которые перекрывают сложности создания веб-приложения под различные сценарии установки:</p><ul><li>Единая кодовая база для установки приложения на различные устройства (настольные, мобильные, ...) и операционные системы (Windows, Linux, macOS, Android, iOS и так далее)</li><li>Поддерживают push-уведомления с сервера, ручную обработку кэширования, автономное использование и так далее</li><li>Они интегрируются с локальной операционной системой</li><li>Обновления прозрачны для пользователя и происходят гораздо быстрее, чем в традиционном приложении (в большинстве случаев)</li><li>Разработка PWA требует гораздо меньших затрат, чем создание аналогичных целевых индивидуальных приложений для каждой платформы</li><li>Вы можете использовать все доступные веб-технологии, фреймворки и библиотеки</li><li>Могут индексироваться поисковыми системами, а их распространение и установка не зависят от проприетарных магазинов приложений</li><li>Отзывчивые, безопасные и быстрые, ими можно поделиться с помощью одной лишь ссылки</li><li>Вы можете обращаться к локальным устройствам с помощью стандартных веб-интерфейсов API, например к локальной файловой системе и USB-устройствам, использовать аппаратное ускорение графики и т.д.</li><li>Вы можете работать с локальными устройствами с помощью стандартных веб-интерфейсов API.</li><li>Некоторые магазины приложений позволяют переупаковывать PWA и распространять его как обычное приложение (Microsoft Store, Amazon Store, Android Store и др.)</li></ul><p>Есть и другие преимущества, но этих, пожалуй, достаточно, чтобы привести их в качестве аргумента. Кроме того, в SPA проще добавить необходимые элементы, чтобы превратить его в PWA. В результате PWA могут показаться &quot;серебряной пулей&quot; среди приложений, однако следует учитывать и некоторые недостатки:</p><ul><li>Производительность PWA хороша, но в некоторых конкретных сценариях она всегда будет отставать от нативного приложения. То же самое может произойти и на устаревшем оборудовании - они будут работать, но производительность может пострадать.</li><li>Устройства Apple немного отстают в освоении некоторых веб-технологий или специально ограничивают их применение для PWA (например, серверные push-уведомления).</li><li>Необходимо приложить немного больше усилий, чтобы охватить различные сценарии работы пользователей на разных устройствах (но немного больше, чем для обычного отзывчивого веб-приложения).</li><li>Некоторые магазины приложений не допускают PWA (в частности, на момент написания статьи это Apple App Store). Кроме того, приложение не получит выгоды от экспозиции и <em>пешеходного трафика (foot traffic)</em> из магазина приложений.</li></ul><p>В целом, преимущества значительно перевешивают недостатки. По мере развития веб-технологий PWA будут получать все больше преимуществ и становиться все более распространенными. Теперь, имея более полное представление о том, что такое PWA и что он может делать, давайте модернизируем наши SPA в PWA.</p><h2 id="увеличение-spa-до-уровня-pwa" tabindex="-1">Увеличение SPA до уровня PWA <a class="header-anchor" href="#увеличение-spa-до-уровня-pwa" aria-label="Permalink to &quot;Увеличение SPA до уровня PWA&quot;">​</a></h2><p>Первое требование, о котором уже говорилось, - это обслуживание приложения по защищенному соединению. Как это сделать, установив на сервере бесплатный SSL-сертификат с помощью <strong>Let&#39;s Encrypt</strong>, мы рассмотрим в главе 10, <em>Развертывание приложения</em>. Учитывая это, давайте посмотрим, как выполнить другие требования.</p><h3 id="фаил-манифеста" tabindex="-1">Файл манифеста <a class="header-anchor" href="#фаил-манифеста" aria-label="Permalink to &quot;Файл манифеста&quot;">​</a></h3><p>Добавление файла манифеста - это отправная точка для превращения нашего приложения в PWA. Это не что иное, как JSON-файл с известными полями, которые указывают браузеру или операционной системе, как приложение должно быть установлено на настольном или мобильном устройстве.</p><p>Этот файл должен быть связан в секции <strong>head</strong> нашего файла <strong>index.html</strong>, и хотя он может иметь произвольное название, принято использовать имя <strong>manifest.json</strong> или <strong>app.webmanifest</strong>. Официальная спецификация предлагает расширение <strong>.webmanifest</strong>, но при этом уточняет, что имя не имеет особого значения, если файл принимается правильно с типом <strong>application/manifest+json - Multipurpose Internet Mail Extensions</strong> (<strong>MIME</strong>) (см. <a href="https://www.w3.org/TR/appmanifest/" target="_blank" rel="noreferrer">https://www.w3.org/TR/appmanifest/</a>, раздел <em>§1.1.2</em>). В наших примерах кода мы будем использовать имя <strong>manifest.json</strong> для простоты:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;manifest&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/manifest.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>Заметим из предыдущего кода, что файл размещается в корне нашего приложения, а атрибут <strong>rel</strong> должен быть <strong>manifest</strong>. Атрибуты полей в нашем файле манифеста могут располагаться в любом порядке, и все они считаются <em>опциональными</em> согласно вышеупомянутой спецификации.</p><p>Однако некоторые платформы все же предполагают минимальный набор атрибутов, который мы будем считать <em>необходимым</em>. Обычная практика также требует наличия других атрибутов, которые мы будем относить к <em>рекомендуемым</em>, и, наконец, некоторые атрибуты в спецификации часто используются в магазинах приложений, социальных сетях и т.д. для представления или описания приложения, поэтому мы будем относить их к <em>описательным</em> полям.</p><p>Эта классификация не является частью спецификации, но может быть полезна при реализации. Вот список наиболее распространенных и полезных атрибутов:</p><h4 id="необходимо" tabindex="-1">Необходимо: <a class="header-anchor" href="#необходимо" aria-label="Permalink to &quot;Необходимо:&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Классификация</th><th>Атрибут</th></tr></thead><tbody><tr><td><strong>short_name</strong></td><td>Короткое имя, используемое в тех случаях, когда не хватает места для отображения полного имени приложения. В мобильных устройствах часто используется для названия значка.</td></tr><tr><td><strong>name</strong></td><td>Полное имя приложения.</td></tr><tr><td><strong>icons</strong></td><td>Массив объектов, каждый из которых представляет собой отдельную иконку, используемую в различных контекстах. Каждый объект имеет как минимум два атрибута:<br><br>- <strong>src</strong>: Путь к изображению<br>- <strong>sizes</strong>: Строка с размерами изображения</td></tr><tr><td><strong>start_url</strong></td><td>URL-адрес, с которого должно стартовать приложение, заданный разработчиком.</td></tr><tr><td><strong>display</strong></td><td>Строка, представляющая способ представления приложения:<br><br>- <strong>fullscreen</strong>: В полноэкранном режиме, но с отображением пользовательского интерфейса браузера.<br>- <strong>standalone</strong>: Аналогично <strong>fullscreen</strong>, но без элементов управления браузера. На рабочем столе элементы управления windows все равно будут отображаться.<br>- <strong>minimal-ui</strong>: Как <strong>standalone</strong>, но с базовой навигацией для перемещения вперед и назад, печати, обмена и т.д.<br>- <strong>browser</strong>: Приложение открыто в браузере по умолчанию.</td></tr></tbody></table><h4 id="рекомендуется" tabindex="-1">Рекомендуется: <a class="header-anchor" href="#рекомендуется" aria-label="Permalink to &quot;Рекомендуется:&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Классификация</th><th>Атрибут</th></tr></thead><tbody><tr><td><strong>theme_color</strong></td><td>Строка, представляющая собой цвет CSS для приложения. ОС сама решает, как использовать это значение (обычно оно применяется в строке заголовка окна).</td></tr><tr><td><strong>background_color</strong></td><td>Строка, представляющая цвет фона приложения при его запуске и до применения стилей приложения.</td></tr><tr><td><strong>orientation</strong></td><td>В основном используется в мобильных устройствах и определяет ориентацию, которую должно использовать приложение - например, <strong>ландшафтная, портретная, любая</strong> и т.д.</td></tr><tr><td><strong>lang</strong></td><td>Строка, определяющая основной язык приложения.</td></tr></tbody></table><h4 id="описательные" tabindex="-1">Описательные: <a class="header-anchor" href="#описательные" aria-label="Permalink to &quot;Описательные:&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Классификация</th><th>Атрибут</th></tr></thead><tbody><tr><td><strong>shortcuts</strong></td><td>Это массив объектов, определяющих пункты прямого меню для тесной интеграции с операционной системой. Обычно они появляются в контекстном меню, например, когда пользователь щелкает правой кнопкой мыши на значке приложения. Каждый объект ярлыка должен содержать как минимум <strong>имя</strong> и <strong>URL</strong>, а также - опционально - <strong>описание</strong> и массив <strong>иконок</strong>.</td></tr><tr><td><strong>description</strong></td><td>Строка с кратким описанием приложения.</td></tr><tr><td><strong>screenshots</strong></td><td>Массив объектов, содержащий следующие поля:<br><br>- <strong>src</strong>: URL-адрес изображения<br>- <strong>type</strong>: MIME-тип изображения<br>- <strong>sizes</strong>: Строка с размерами изображения</td></tr></tbody></table><p>Таблица 6.1 - Поля манифеста.</p><p>На практике я бы рекомендовал заполнять необходимые и рекомендуемые поля для каждого PWA, а описательные поля использовать по мере необходимости, исходя из контекста приложения. Кроме того, следует изучить целевые платформы на предмет наличия дополнительных поддерживаемых полей, которые не входят в стандартную спецификацию.</p><p>Следуя предыдущей таблице, приведем пример файла <strong>manifest.json</strong>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;short_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Пример PWA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Глава 6: Пример прогрессивного веб-приложения&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;start_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;display&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;standalone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;theme_color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#2979FF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;background_color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;orientation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;portrait&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Как видите, создание файла манифеста не требует особых дополнительных усилий и является простым дополнением к нашему SPA.</p><h3 id="тестирование-манифеста" tabindex="-1">Тестирование манифеста <a class="header-anchor" href="#тестирование-манифеста" aria-label="Permalink to &quot;Тестирование манифеста&quot;">​</a></h3><p>После того как вы создали файл манифеста и связали его с файлом <strong>index.html</strong>, вы можете использовать инструменты разработчика в браузере, чтобы проверить, правильно ли он загрузился. Например, в браузере Google Chrome в меню <strong>Application</strong> мы видим, что файл примера загрузился правильно:</p><p><img src="`+p+`" alt="image"></p><p>Рисунок 6.1 - Инструменты разработчика в Google Chrome, показывающие файл манифеста.</p><p>Но есть еще одна тема, связанная с установкой приложения, которую мы должны рассмотреть: когда и как пользователь узнает, что веб-приложение может быть установлено? Здесь на помощь приходит <em>Install prompt</em>, который мы рассмотрим далее.</p><h3 id="подсказка-к-установке-install-prompt" tabindex="-1">Подсказка к установке (Install prompt) <a class="header-anchor" href="#подсказка-к-установке-install-prompt" aria-label="Permalink to &quot;Подсказка к установке (Install prompt)&quot;">​</a></h3><p>Каждая платформа (мобильная или настольная) имеет свой собственный метод определения того, когда PWA, удовлетворяющее критериям установки, может быть установлено. Он может включать уведомление о том, что пользователь должен согласиться на установку через определенное время, или предоставлять только пользовательский интерфейс для этого.</p><p>На мобильных устройствах установленный PWA будет размещен на главном экране рядом с другими нативными приложениями, а на настольных компьютерах он может быть размещен внутри браузера и/или в главном меню. Кроме того, в мобильных операционных системах, таких как Android, автоматически создается заставка с указанными в манифесте темой, цветами фона и иконкой приложения.</p><p>Независимо от того, как и когда PWA может быть установлено, важно знать, что это может быть сделано только с согласия и по инициативе пользователя. Мы не можем запустить установку автоматически из кода без согласия пользователя.</p><p>Основной процесс установки выглядит следующим образом:</p><ol><li>Когда платформа обнаруживает, что наше приложение может быть установлено, она запускает событие в объекте окна под названием <strong>beforeinstallprompt</strong>. Мы можем кэшировать это событие, чтобы позже вызвать подсказку из нашего приложения.</li><li>Пользователь инициирует установку либо через пользовательский интерфейс платформы, либо через наш метод, предоставляемый PWA (например, кнопку).</li><li>Платформа предложит пользователю принять или отклонить установку.</li><li>Если пользователь соглашается, он устанавливает PWA и запускает другое событие с именем <strong>appinstalled</strong>.</li></ol><p>Это достаточно простой рабочий процесс. Однако событие <strong>beforeinstallprompt</strong> срабатывает только один раз, поэтому, если пользователь отказывается от установки, нам необходимо дождаться повторного срабатывания этого события в браузере.</p><p>Теперь, когда мы поняли, как все будет работать, пришло время посмотреть на это в коде. Рассмотрим, что в шаблоне нашего компонента Vue 3 есть следующие элементы:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_install_ready </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_app_installed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Установите это приложение</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;button @click=&quot;installPWA()&quot;&gt;Install&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_app_installed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Прогрессивное веб-приложение установлено</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>Как видите, у нас есть два параграфа, которые будут отображаться в зависимости от значения реактивных переменных <strong>_install_ready</strong> и <strong>_app_installed</strong>, обе они булевские. Первая появится, когда PWA будет готов к установке, и предоставит кнопку для запуска установки с помощью функции <strong>installPWA()</strong>. Второй будет отображаться после ее выполнения.</p><p>Наш код в секции <code>script</code> также достаточно прост:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onMounted, ref, onBeforeUnmount } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    _install_ready</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    _install_prompt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    _app_installed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Определяем возможность установки PWA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;beforeinstallprompt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, savePrompt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;appinstalled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handleAppInstalled)})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> savePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Предотвращает мобильную подсказку</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Сохраняем ссылку на событие, чтобы активировать его позже</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _install_prompt.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Уведомить пользовательский интерфейс о том, что приложение может быть установлено</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _install_ready.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> installPWA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Запуск приглашения к установке</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_install_prompt.value){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         _install_prompt.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleAppInstalled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _install_prompt.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _app_installed.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>В предыдущем коде мы регистрируем два слушателя при установке нашего компонента на страницу: один для управления и кэширования запроса на установку, а другой - для определения того, когда приложение было установлено. Некоторые части были опущены для упрощения кода, но полный вариант компонента со стилями можно найти в репозитории GitHub.</p><p>Хотя в предыдущем коде мы регистрируем два слушателя при установке компонента на страницу, один из них управляет кэшированием подсказки об установке, а другой определяет момент установки приложения.</p><p>Хотя предыдущий пример является довольно упрощенным, существует несколько известных шаблонов для продвижения или представления возможности установки конечному пользователю. Все они основаны на одной и той же логике - перехвате события и последующем промптировании его при показе триггерного элемента. Реализация тривиальна и имеет больше отношения к дизайну, чем к шаблону кодирования, поэтому мы рассмотрим здесь только макеты:</p><ul><li>Простая кнопка <strong>Установить</strong> (как в нашем примере приложения):</li></ul><p><img src="`+l+'" alt="image"></p><p>Рисунок 6.2 - Простая кнопка установки</p><ul><li>Кнопка меню <strong>Install</strong> размещается в основной навигации:</li></ul><p><img src="'+h+'" alt="image"></p><p>Рисунок 6.3 - Кнопка установки главного меню</p><ul><li>Запрос на установку:</li></ul><p><img src="'+e+'" alt="image"></p><p>Рисунок 6.4 - Запрос на установку</p><ul><li>Наложенный сверху элемент, например, баннер установки (либо перед заголовком, либо в нижней части области просмотра):</li></ul><p><img src="'+k+`" alt="image"></p><p>Рисунок 6.5 - Баннер приглашения к установке</p><p>После того как приложение будет установлено, мы хотим предотвратить постоянный запрос пользователя на установку. В этом случае рекомендуется сохранить флаг автономности в <strong>localStorage</strong>, cookie на <strong>indexeDB</strong>, или обозначить стартовый URL нашего приложения в определенном месте.</p><p>Варианты автономного постоянного хранилища мы рассмотрим в главе 7, <em>Управление потоками данных</em>. Теперь настало время рассмотреть последний элемент, позволяющий превратить наш SPA в настоящий PWA: service workers.</p><h2 id="service-workers" tabindex="-1">Service workers <a class="header-anchor" href="#service-workers" aria-label="Permalink to &quot;Service workers&quot;">​</a></h2><p>Service worker - это JavaScript-сценарий, который выполняется в отдельном потоке, как фоновый процесс для вашего приложения. Он действует как прокси для сети, перехватывая все вызовы и действуя в соответствии с запрограммированной стратегией обслуживания страниц и данных.</p><p>Мы можем иметь несколько рабочих служб, поскольку каждая из них отвечает за свою область видимости. Область видимости определяется как каталог (URL-путь), в котором находится исходный файл для сервисного работника. Таким образом, service worker, размещенный в корне приложения, будет работать со всем SPA/PWA.</p><p>Service workers устанавливаются без вмешательства пользователя, поэтому их можно использовать, даже если пользователь не установил PWA. Они имеют четко определенный <a href="https://web.dev/service-worker-lifecycle/" target="_blank" rel="noreferrer">жизненный цикл</a>, инициируя события для каждого завершенного состояния.</p><p>Для начала сервис-рабочий должен быть сначала <em>зарегистрирован</em>, затем он становится <em>активированным</em>, и, в конце концов, мы можем также <em>снять с регистрации</em> его. После активации сервисного работника он не будет брать на себя управление взаимодействием с приложением до следующего обращения к сайту.</p><p>Самыми распространенными стратегиями программирования сервисного работника являются следующие:</p><ul><li>Использовать только кэш</li><li>Использовать только сеть</li><li>Попытаться сначала использовать кэш, а затем вернуться к сети</li><li>Попытаться сначала использовать сеть, а затем вернуться к кэшу</li><li>Сначала использовать кэш, затем обновить кэш</li></ul><p>При рассмотрении стратегий кэширования и автономной работы нам необходимо учитывать, какие файлы и активы, необходимые нашему приложению для работы, будут изменяться мало или вообще не будут изменяться, чтобы кэшировать их. Также необходимо определить маршруты, которые никогда не следует кэшировать.</p><p>Чтобы использовать service worker, мы регистрируем его в нашем файле <strong>main.js</strong> следующими строками:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (navigator.serviceWorker) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   navigator.serviceWorker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/service_worker.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>В этих строках мы сначала проверяем, есть ли в текущем браузере возможность использовать сервис-воркеры, и если есть, то регистрируем его. Как мы видим, мы поместили сервис в корень. Для данного примера мы будем использовать стратегию &quot;кэш вперед, сеть в случае сбоя&quot; вручную для всех сетевых вызовов:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Устанавливаем стратегию, сначала кэш, потом сеть.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CACHE_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyCache&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fetch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Перехватывает событие для реагирования</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Пытается найти запрос в кэше</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> found</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> caches.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.request);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (found) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Не кэшированный фонт, возвращаемся к сети</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.request);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Открываем кэш</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> caches.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CACHE_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Поместить ответ сети в кэш.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.request, response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Возврат ответа</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Предыдущий код почти дословно основан на примере, приведенном в документации <a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Offline_Service_workers" target="_blank" rel="noreferrer">Mozilla Developer Network</a>. Комментарии в коде помогут понять логику реализации стратегии.</p><p>Однако использование базовых API, доступных работнику сервиса, может оказаться громоздким, а то и многословным. Вместо этого удобнее использовать фреймворк или библиотеку для работы с ними и реализации более сложных стратегий.</p><p>Стандартом сегодня является использование <a href="https://developer.chrome.com/docs/workbox/" target="_blank" rel="noreferrer">Workbox</a>, созданного <strong>Google</strong>. Мы будем использовать его не напрямую, а через плагин для Vite, который мы рассмотрим в следующем разделе.</p><p>После того как мы рассмотрели весь код, наш PWA готов к работе и установке. Если мы запустим пример приложения на сервере разработки, то увидим, что его можно установить. Используя пользовательский интерфейс браузера или нашу кнопку <strong>Install</strong>, мы получим следующее сообщение:</p><p><img src="`+r+`" alt="image"></p><p>Рисунок 6.6 - приглашение к установке PWA с localhost</p><p>Ручная адаптация нашего SPA для превращения его в PWA не является сложной, но требует некоторой ручной работы. Однако с тем выбором инструментов, который у нас есть, мы можем сделать это лучше. Существует более простой способ сгенерировать и внедрить файл манифеста и рабочий сервис в рамках рабочего процесса непосредственно в наш SPA: с помощью плагина Vite.</p><h2 id="плагин-vite-pwa" tabindex="-1">Плагин Vite-PWA <a class="header-anchor" href="#плагин-vite-pwa" aria-label="Permalink to &quot;Плагин Vite-PWA&quot;">​</a></h2><p>В экосистеме плагинов Vite есть отличный <a href="https://vite-pwa-org.netlify.app" target="_blank" rel="noreferrer">плагин Vite-PWA</a> с нулевой конфигурацией. Уже из коробки он предоставляет нам отличную функциональность без особых усилий. Мы устанавливаем плагин как зависимость разработчика с помощью следующей команды в терминале:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite-plugin-pwa</span></span></code></pre></div><p>После установки необходимо зарегистрировать его в конфигурации Vite. Измените <strong>vite.config.js</strong> файл следующим образом:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { VitePWA } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-pwa&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VitePWA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    registerType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;autoUpdate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    injectRegister: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;auto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    devOptions: { enabled:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    workbox: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         globPatterns: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;**/*.{js,css,html,ico,png,svg}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    includeAssets:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fonts/*.ttf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;images/*.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css/*.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    manifest: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;short_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Пример PWA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Глава 6 - Пример прогрессивного веб-приложения&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;start_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;display&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;standalone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;theme_color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#333333&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;background_color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#000000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;orientation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;портрет&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;icons&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/images/chapter_6_icon_192x192.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &quot;sizes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;192x192&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/png&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/images/chapter_6_icon.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &quot;sizes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;512x512&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/png&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/images/chapter_6_icon.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &quot;sizes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;512x512&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &quot;назначение&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;маскируемый&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;prefer_related_applications&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Используя этот плагин, мы снимаем со сборщика бремя генерации service worker и веб-манифеста. Это необходимо, поскольку при каждой промышленной сборке Vite будет генерировать разные имена файлов для каждого скрипта в соответствии с нашей стратегией &quot;ленивой&quot; загрузки компонентов, о которой мы говорили в предыдущей главе.</p><p>В предыдущем примере мы передаем в плагин <strong>VitePWA()</strong> объект с некоторыми разумными опциями для автоматического создания и внедрения манифеста и рабочего скрипта. Если нам нужен более тонкий контроль над создаваемой стратегией рабочего сервиса, а также над веб-манифестом, то можно использовать плагин в &quot;режиме инъекции&quot; и предоставить базовый файл для нашего рабочего сервиса.</p><p>В этом случае в скрипт будут инжектироваться сгенерированные в процессе сборки файлы. Под капотом плагин использует <strong>Workbox</strong>, инструмент, о котором мы уже упоминали и который мы можем настраивать непосредственно через поле <strong>workbox</strong>. Более подробное рассмотрение различных реализаций и стратегий выходит за рамки данной книги, но читателю следует обратиться к документации по плагину <strong>Vite-PWA</strong> и <strong>Workbox</strong> для конкретных контекстов и случаев использования.</p><h2 id="тестирование-показателеи-pwa-с-помощью-google-lighthouse" tabindex="-1">Тестирование показателей PWA с помощью Google Lighthouse <a class="header-anchor" href="#тестирование-показателеи-pwa-с-помощью-google-lighthouse" aria-label="Permalink to &quot;Тестирование показателей PWA с помощью Google Lighthouse&quot;">​</a></h2><p>В браузерах на основе Chrome вместе с инструментами разработчика поставляется утилита Lighthouse, специально предназначенная для тестирования и оценки веб-страниц, а также готовности PWA. Чтобы получить доступ к этому инструменту, после открытия своего приложения браузере выполните следующие действия:</p><ol><li>Откройте инструменты разработчика (нажав <em>F12</em> в Windows/Linux, <em>Fn</em> + <em>F12</em> в Mac, или через меню браузера).</li><li>Выберите меню <strong>Маяк</strong> в правом верхнем углу.</li><li>Выберите <strong>Mobile</strong> или <strong>Desktop</strong>, а также убедитесь, что отмечена категория <strong>Progressive Web App</strong>.</li><li>Нажмите <strong>Анализировать загрузку страницы</strong> в правом верхнем углу инструмента.</li></ol><p>Инструменты разработчика должны выглядеть примерно так:</p><p><img src="`+E+'" alt="image"></p><p>Рисунок 6.7 - Утилита &quot;Lighthouse&quot;.</p><p>Утилита проведет ряд тестов, и в каждой категории будет отображаться рейтинг, а также подробный список элементов, которые прошли или не прошли тест. Если наше приложение не соответствует критериям PWA, то в пунктах, отмеченных красным цветом, будет указано, почему и как это исправить:</p><p><img src="'+o+'" alt="image"></p><p>Рисунок 6.8 - Оценки примера кода главы 6 в Lighthouse.</p><p>Наш пример кода приложения полностью соответствует требованиям PWA и успешно проходит все тесты. Конечно, этого легче добиться с небольшими приложениями. На практике каждый рейтинг выше 90 является отличным.</p><h2 id="подведение-итогов" tabindex="-1">Подведение итогов <a class="header-anchor" href="#подведение-итогов" aria-label="Permalink to &quot;Подведение итогов&quot;">​</a></h2><p>В этой главе мы рассмотрели простой SPA и научились превращать его в PWA как вручную, так и с помощью плагина в Vite. Пользователи могут устанавливать PWA на свои платформы наряду с родными приложениями и взаимодействовать с ними, даже если они не подключены к Интернету.</p><p>PWA обладают множеством преимуществ по сравнению с приложениями, работающими только в Интернете. Мы также рассмотрели, как с помощью Lighthouse можно измерить и оценить наше приложение в нескольких стандартных для отрасли категориях. В этой главе мы закончили рассмотрение поэтапного создания приложений с использованием веб-технологий и впредь будем уделять основное внимание шаблонам и моделям для повышения внутренней производительности и эффективности.</p><h2 id="вопросы-для-проверки" tabindex="-1">Вопросы для проверки <a class="header-anchor" href="#вопросы-для-проверки" aria-label="Permalink to &quot;Вопросы для проверки&quot;">​</a></h2><p>Для закрепления понятий, изученных в этой главе, ответьте на следующие вопросы:</p><ul><li>В чем разница между SPA и PWA?</li><li>Каковы преимущества PWA?</li><li>Каким основным трем требованиям должно соответствовать веб-приложение, чтобы считаться PWA?</li><li>Какие инструменты можно использовать для постепенной подготовки приложения к работе в качестве PWA?</li><li>Что такое service worker и каковы некоторые стратегии его использования?</li><li>Что такое веб-манифест и зачем он нужен?</li></ul>',123)]))}const q=i(g,[["render",d]]);export{C as __pageData,q as default};
