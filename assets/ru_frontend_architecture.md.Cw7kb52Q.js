import{_ as e,c as t,o,ah as r}from"./chunks/framework.CH-e-O8w.js";const h=JSON.parse('{"title":"Архитектура фронтэнд приложений","description":"","frontmatter":{},"headers":[],"relativePath":"ru/frontend/architecture.md","filePath":"ru/frontend/architecture.md","lastUpdated":1738480984000}'),s={name:"ru/frontend/architecture.md"};function c(d,a,i,p,l,u){return o(),t("div",null,a[0]||(a[0]=[r('<h1 id="архитектура-фронтэнд-приложении" tabindex="-1">Архитектура фронтэнд приложений <a class="header-anchor" href="#архитектура-фронтэнд-приложении" aria-label="Permalink to &quot;Архитектура фронтэнд приложений&quot;">​</a></h1><details class="details custom-block"><summary>Что такое хорошая архитектура веб-приложения</summary><p>Есть разные теоретические определения и обоснования данного понятия, но грубо говоря это следующее.</p><p>Допустим ты разрабатываешь проект, уже на финальном этапе. К тебе подходит заказчик и говорит что-то типа: я хочу добавить тень ко всем кнопкам, я хочу изменить UI библиотеку, мы решили поддерживать несколько языков, мы решили заменить вот этот модуль на другой, нужно сделать более детальную адаптивность для разных разрешений, мы решили добавить темы, мы меняем провайдера услуг по обработке платежей, у нас повышается число пользователей / сайт тормозит / надо его ускорить, надо повысить уровень безопасности сайта, мы взяли мидл программиста, введи его в курс дела быстро, и пусть он добавляет функционал или фиксит баги и т.п.</p><p>Хорошая архитектура фронтенд приложения позволяет выполнить всё это наиболее эффективно с наименьшими затратами.</p></details><details class="details custom-block"><summary>ООП на фронтенде</summary><p>Многие приходя из разработки на объектно-ориентированных языках пытаются использовать концепции ООП и на фронте и программировать с классами, наследованием, полиморфизмом и прочим.</p><p>Это ошибка. Основные вычисления на фронте связаны с UI - показ данных, обработка взаимодействия с пользователем. Системы классов и микросервисов на них просто не нужны. Конечно, можно создать базовую кнопку, обернуть ее в два кастомных компонента и считать это наследованием, но в коде этого не получается. Поэтому надо учиться мыслить другими категориями - компоненты, композаблы, js модули. И использовать свою мощь JavaScript-a, а не пытаться натянуть его на ООП.</p><p>В то же время неплохой аналогией объекта с глобальным (&quot;статичным&quot;) и локальным (&quot;объектным&quot;) состоянием является композабл функция. Это можно использовать в определённых ситуациях.</p></details><details class="details custom-block"><summary>Многопоточность и асинхронность</summary><p><strong>Многопоточность</strong> - это когда программист может создать отдельный поток и запустить в нем свой определенный код. Например, можно создать два потока, один в бесконечном цикле выводит в консоль &quot;<em>Поток А</em>&quot;, а второй - &quot;<em>Поток В</em>&quot;. Эти строки будут чередоваться в выводе. Можно задать приоритеты потокам, и тогда поток в приоритетом 3 будет выводить сообщения в 3 раза чаще, чем поток с приоритетом 1.</p><p>Данные два потока должны выполняться одновременно, но это условно. Потому что если потоков 10, а процессор двухядерный с двумя своими потоками на ядро, то чисто физически больше 4 одновременных потоков выполнять нельзя. Поэтому потоки делятся на кусочки кода, и они выполняются по очереди - это называется конкурентностью.</p><p>В мире JavaScript cтановиться в одну очередь потоки могут на уровне JS рантайма, OS, CPU. Обычные десктопные приложения (например, IDE) тоже бывают с хорошей поддержкой распараллеливания на многоядерные процессоры - и тогда они используют CPU максимально эффективно, или нагружающие только одно ядро. В последнем случае апгрейд процессора на более современный многоядерный почти ничего не даст, если у старого и нового примерно одна частота.</p><p><strong>Асинхронность</strong> - это когда есть некая неблокирующая функция, точное время исполнения которой неизвестно. И программист может указать код, который должен выполниться после исполнения данной функции (передать <code>callback</code>). Промисы и <code>async/await</code> это нетривиальные, но всё же просто удобные обертки над данной логикой.</p><p>Итак, при асинхронности обычно есть некая пограничная функция, зависящая от внешних обстоятельств (<code>fetch, nextTick, fs.readdir, setTimeout</code>). Её &quot;псевдопараллельное&quot; исполнение в одном потоке вместе с основным кодом обеспечивается механизмом <code>Event Loop</code>.</p><p>Таким образом, это абсолютно разные вещи как по целевому назначению, так и по использованию. Асинхронность в JavaScript реализована через промисы и async/await, многопоточность или её подобие реализуется райнтаймом (<code>Web workers</code>, <code>worker_threads</code>).</p><p>Асинхронность нужна для общения с &quot;внешним миром&quot;, включая отрисовку браузера. Многопоточность позволяет выделить ресурсоемкие вычисления (а также сетевую загрузку) в отдельные потоки (<code>Web workers</code>), что снижает нагрузку на основной поток, который отвечает и за рендеринг. Это благоприятно сказывается на отзывчивости вашего UI.</p></details><details class="details custom-block"><summary>Полезные советы</summary><h6 id="избегаите-зависимостеи" tabindex="-1">Избегайте зависимостей <a class="header-anchor" href="#избегаите-зависимостеи" aria-label="Permalink to &quot;Избегайте зависимостей&quot;">​</a></h6><p>Если есть возможность не вводить новую зависимость (не подключать новый npm пакет) - не делайте это. Это может немного сэкономит ваше время, но сторонняя библиотека рано или поздно устареет, перестанет поддерживаться, в ней могут обнаружить уязвимость. Кроме того она увеличивает размер вашего бандла, что напрямую влияет на производительность вашего приложения. Tree shaking хорош в рекламных зазываниях, но работает реально далеко не всегда.</p><p>Если вам нужна, например, функция <code>debounce</code>, не торопитесь подключать её вместе с какой-либо библиотекой. Загуглите её реализацию и скопируйте 15 строк кода, сделав свою функцию.</p><hr><h6 id="используите-обертки-над-компонентами-ui-библиотек-и-сторонних-утилит" tabindex="-1">Используйте обертки над компонентами UI библиотек и сторонних утилит <a class="header-anchor" href="#используите-обертки-над-компонентами-ui-библиотек-и-сторонних-утилит" aria-label="Permalink to &quot;Используйте обертки над компонентами UI библиотек и сторонних утилит&quot;">​</a></h6><p>Если вы используете компоненты какой-то UI библиотеки, не используйте их напрямую - сделайте обертки для них. Например, <code>BaseButton</code> или <code>BaseInput</code>. Это намного облегчит стилизацию компонент, а также сильно упростит переход на другую библиотеку, или замену на свои компоненты.</p><p>То же самое с утилитами.</p><hr><h6 id="регулярныи-рефакторинг" tabindex="-1">Регулярный рефакторинг <a class="header-anchor" href="#регулярныи-рефакторинг" aria-label="Permalink to &quot;Регулярный рефакторинг&quot;">​</a></h6><p>Время от времени делайте рефакторинг кода, перемещая компоненты и модули туда, где они должны быть логически, переименовывая их, и структурируя и улучшая сам код. Это полезно и для кода, и для вашего профессионального роста.</p><hr><h6 id="используите-css3" tabindex="-1">Используйте CSS3 <a class="header-anchor" href="#используите-css3" aria-label="Permalink to &quot;Используйте CSS3&quot;">​</a></h6><p>Старайтесь использовать для адаптивноcти чистый CSS3. Не привязывайтесь к колоночным моделям CSS и UI библиотек, если только это не проект из разряда: &quot;сделал и забыл, пусть заказчик дальше с ним мучается&quot;.</p><p>Потратьте пару дней на изучение Флексбокса и вы сможете верстать на нём быстрей и лучше, чем на любом Тайлвинде.</p><hr><h6 id="используите-современные-стандарты-и-возможности-языков" tabindex="-1">Используйте современные стандарты и возможности языков <a class="header-anchor" href="#используите-современные-стандарты-и-возможности-языков" aria-label="Permalink to &quot;Используйте современные стандарты и возможности языков&quot;">​</a></h6><p>Например, семантические элементы HTML5 - aside, header, section, article, details и.т.д.</p><p>CSS3 - Flexbox и Grid, Container query</p><hr><h6 id="документируите-проект" tabindex="-1">Документируйте проект <a class="header-anchor" href="#документируите-проект" aria-label="Permalink to &quot;Документируйте проект&quot;">​</a></h6><p>Рисуйте use-case и другие диаграммы, описывайте основной функционал проекта и важные детали его реализации - это как минимум повысит ваш уровень как разработчика ПО.</p><p>VitePress - очень удобный инструмент для технического документирования.</p></details>',5)]))}const m=e(s,[["render",c]]);export{h as __pageData,m as default};
