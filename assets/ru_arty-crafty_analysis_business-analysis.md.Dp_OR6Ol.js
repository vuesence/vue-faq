import{_ as e,c as s,o as t,ah as r}from"./chunks/framework.CH-e-O8w.js";const o="/assets/use-case.vCRX5OZ8.png",n="/assets/use-case-online-shopping-example.BK4JZDPi.jpg",_=JSON.parse('{"title":"Бизнес-анализ","description":"","frontmatter":{"pageClass":"arty-crafty","head":[["meta",{"name":"og:site_name","content":"Arty-Crafty - проект онлайн магазина"}],["meta",{"name":"og:image","content":"/images/arty-crafty-logo.png"}],["meta",{"name":"twitter:image","content":"/images/arty-crafty-logo.png"}]]},"headers":[],"relativePath":"ru/arty-crafty/analysis/business-analysis.md","filePath":"ru/arty-crafty/analysis/business-analysis.md","lastUpdated":1738480984000}'),c={name:"ru/arty-crafty/analysis/business-analysis.md"};function i(l,a,p,d,m,h){return t(),s("div",null,a[0]||(a[0]=[r('<h1 id="бизнес-анализ" tabindex="-1">Бизнес-анализ <a class="header-anchor" href="#бизнес-анализ" aria-label="Permalink to &quot;Бизнес-анализ&quot;">​</a></h1><h2 id="границы-проекта" tabindex="-1">Границы проекта <a class="header-anchor" href="#границы-проекта" aria-label="Permalink to &quot;Границы проекта&quot;">​</a></h2><p>Наш случай (витрина-магазин-маркетплейс) - довольно распространенный, изученный и проверенный. Есть известные решения и лучшие практики для него - как технические (код), так и в плане подбора нужного функционала.</p><p>Если бы заказчиком был некий отдельный клиент, необходимо было бы четко задокументировать с ним в SRS каждый функционал, каждый элемент экрана сайта для избежания дальнейших проблем и претензий с обеих сторон, но так как мы &quot;пишем с натуры&quot;, то этот момент можно опустить.</p><h2 id="существующие-решения" tabindex="-1">Существующие решения <a class="header-anchor" href="#существующие-решения" aria-label="Permalink to &quot;Существующие решения&quot;">​</a></h2><p>Есть ли решения, который можно использовать? О бэкенде речь ниже, для фронтенда не было найдено ничего. <code>Vue Storefront</code> мутный продукт, предлагаемый в основном как сервис, да еще и написанный на <code>Nuxt 2</code>. Больше серьезных решений на Vue найдено не было.</p><p>Рассмотрим намеченные этапы развития проекта.</p><h2 id="витрина" tabindex="-1">Витрина <a class="header-anchor" href="#витрина" aria-label="Permalink to &quot;Витрина&quot;">​</a></h2><p>На начальном этапе пользователь должен иметь возможность просматривать каталог и отдельные продукты. Визуально это означает, что в нашем веб приложении будет секция с каталогом категорий, а так же представление (view) со списком продуктов выбранной категории, и представление с описанием продукта.</p><p>С точки зрения потоков данных, веб приложение должно получать информацию о каталоге, о продуктах в определенной категории и о конкретном продукте, что означает три типа запросов к бэкенду.</p><p>На первом этапе &quot;бэкенд&quot; будет простыми <code>json</code> файлами, отдаваемыми самим сервером фронтенда.</p><p>Данные файлы будут: каталог категорий, пара файлов категорий продуктов, несколько файлов продуктов.</p><p>Задача первого этапа - настроить маршрутизацию (<code>vue routing</code>) и сделать возможность просматривать каталог продуктов, получая данные по сети. Данный скелет приложения позволит в дальнейшем наращивать на него функциональность.</p><h2 id="магазин" tabindex="-1">Магазин <a class="header-anchor" href="#магазин" aria-label="Permalink to &quot;Магазин&quot;">​</a></h2><p>Здесь потребуется добавление Корзины (Shopping cart) и системы заказов (Orders). На этом этапе (и даже чуть раньше) нужно будет подключать полноценный бэкенд. Мы возьмем какое-нибудь <code>Headless CMS e-commerce</code> решение. Если бы это был просто наш магазин, можно было бы написать свой несложный бэкенд, однако нужна полноценная админка для технически неподкованых продавцов (merchants), а это очень трудоемко.</p><p>Со сторонним заказчиком необходимо бы было провести анализ существующих подходящих Headless CMS e-commerce решение с расчетом дальнейших затрат. Мы же ориентируемся на наличие open source решений для этого, например <a href="https://medusajs.com/" target="_blank" rel="noreferrer">medusa.js</a>, в которых есть возможность работы режиме маркетплейса.</p><p>В любом случае, решаем задачи по мере их поступления. Если мы остановимся на невозможности что-то реализовать в силу объективных обстоятельств, то как минимум витрина с возможностью сделать заказ (без онлайн оплаты) у нас будет, а значит исходная задача в необходимой мере будет решена.</p><h2 id="маркетплеис" tabindex="-1">Маркетплейс <a class="header-anchor" href="#маркетплеис" aria-label="Permalink to &quot;Маркетплейс&quot;">​</a></h2><p>На фронтенде факторизация по продавцам - это, по сути, выборка по специальному аттрибуту, который есть у каждого продукта. Однако в админке этот функционал намного более обширен. В том числе и поэтому мы ориентируемся на стороннее решение для бэкенда.</p><h2 id="use-case-диаграмма" tabindex="-1">Use case диаграмма <a class="header-anchor" href="#use-case-диаграмма" aria-label="Permalink to &quot;Use case диаграмма&quot;">​</a></h2><p>Одним из методов решения задач бизнес анализа являются <a href="https://habr.com/ru/articles/738428/" target="_blank" rel="noreferrer">UML диаграммы</a>, в частности, Use case диаграмма.</p><p>Use case диаграмма нашего проекта может выглядеть примерно так:</p><p><img src="'+o+'" alt="image"></p><p>Разбивка по этапам очень условна.</p><p>Вот более детальный пример Use case диаграммы онлайн магазина:</p><details class="details custom-block"><summary>Use case online store example</summary><p><img src="'+n+'" alt="image"></p></details>',26)]))}const f=e(c,[["render",i]]);export{_ as __pageData,f as default};
