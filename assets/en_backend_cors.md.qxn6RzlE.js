import{_ as s,c as t,o as a,ah as r}from"./chunks/framework.CH-e-O8w.js";const m=JSON.parse('{"title":"CORS","description":"","frontmatter":{},"headers":[],"relativePath":"en/backend/cors.md","filePath":"en/backend/cors.md","lastUpdated":1738480879000}'),o={name:"en/backend/cors.md"};function n(i,e,c,l,p,d){return a(),t("div",null,e[0]||(e[0]=[r(`<h1 id="cors" tabindex="-1">CORS <a class="header-anchor" href="#cors" aria-label="Permalink to &quot;CORS&quot;">â€‹</a></h1><details class="details custom-block"><summary>What are CORS?</summary><p>Roughly speaking, CORS is used to protect your backend from outside requests by setting special HTTP headers.</p><p>More specifically, CORS (Cross-Origin Resource Sharing) is a standard that allows web pages to access objects from third-party Internet resources. A third-party resource is any Internet resource that differs from the requested one in protocol, domain, or port.</p><p>Access is granted by specialized requests. The Internet resource that receives the request contains a list of trusted sources that are allowed to access the objects. The source page of the request is granted access if it is on the list of trusted sources. The &quot;*&quot; mask is used to grant access to all third-party web pages.</p><p>Accordingly, only the backend can do all this, and it is configured on the backend. The specific solution depends on the backend language, the framework used, and even the webserver.</p></details><details class="details custom-block"><summary>CORS working principle</summary><p>When creating an HTTP cross-request, the client browser adds a domain declaration of the web page initiating the request. The domain is declared in the Origin section.</p><p>For example, the page <a href="https://client-1.com/page.html" target="_blank" rel="noreferrer">https://client-1.com/page.html</a> requests data from the page <a href="https://server-site.com/info" target="_blank" rel="noreferrer">https://server-site.com/info</a>. An example of a request from a client browser using CORS methods is shown below:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /info HTTP/1.1</span></span>
<span class="line"><span>Host: server-site.com</span></span>
<span class="line"><span>Origin: client-1.com</span></span></code></pre></div><p>If the server at www.server-site.com allows the request source page to access data from the domain, the <code>Access-Control-Allow-Origin</code> line with the name of the declared domain will appear in its response to the request:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Access-Control-Allow-Origin: https://client-1.com</span></span></code></pre></div><p>If the server to which access is requested does not add the specified string to the response, the client browser will return an error code instead of the info file data.</p><p>If the server allows pages from any third-party domain to access the resource, the response will contain the &quot;*&quot; mask.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Access-Control-Allow-Origin: *</span></span></code></pre></div><p>If the server allows access not to all but a few third-party clients, the server response contains the names of all these domains printed as separate lines or separated by spaces:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Access-Control-Allow-Origin: https://client-1.com https://client-2.com https://client-3.com</span></span></code></pre></div></details><details class="details custom-block"><summary>Problems with CORS</summary><p>CORS problems can occur only when a resource is accessed by a browser, not by a separate program like Postman or other backend.</p><p>As a temporary solution <a href="https://www.google.com/search?q=CORS+proxy" target="_blank" rel="noreferrer">CORS proxy</a>, which becomes an intermediary between frontend and backend, or <a href="https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf" target="_blank" rel="noreferrer">browser extensions</a> can help during development.</p><p><code>Vite</code> provides <a href="https://vitejs.dev/config/server-options.html#server-proxy" target="_blank" rel="noreferrer">such proxy</a> for development.</p></details>`,4)]))}const u=s(o,[["render",n]]);export{m as __pageData,u as default};
