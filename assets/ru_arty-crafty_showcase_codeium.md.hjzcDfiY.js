import{_ as a,o as s,c as e,a4 as i}from"./chunks/framework.B8KxSsRZ.js";const t="/assets/codeium-1.CAoLM-Ra.jpg",o="/assets/codeium-2.6cftlopa.jpg",n="/assets/codeium-3.CA7MW0fv.jpg",f=JSON.parse('{"title":"Codeium","description":"","frontmatter":{"pageClass":"arty-crafty","head":[["meta",{"name":"og:site_name","content":"Arty-Crafty - проект онлайн магазина"}],["meta",{"name":"og:image","content":"/images/arty-crafty-logo.png"}],["meta",{"name":"twitter:image","content":"/images/arty-crafty-logo.png"}]]},"headers":[],"relativePath":"ru/arty-crafty/showcase/codeium.md","filePath":"ru/arty-crafty/showcase/codeium.md","lastUpdated":1729563759000}'),r={name:"ru/arty-crafty/showcase/codeium.md"},p=i('<h1 id="codeium" tabindex="-1">Codeium <a class="header-anchor" href="#codeium" aria-label="Permalink to &quot;Codeium&quot;">​</a></h1><h2 id="автокомплит" tabindex="-1">Автокомплит <a class="header-anchor" href="#автокомплит" aria-label="Permalink to &quot;Автокомплит&quot;">​</a></h2><p>Codeium - это AI помощник, аналогичный Copilot, его бесплатная альтернатива. У него есть расширение для VS Code и других IDE.</p><p>В прошлой главе <code>useFavourites</code> был на 80% написан им с помощью автокомплита. Ты начинаешь писать название функции, он генерит её тело на основании контекста, ты клавишей <code>Tab</code> принимаешь его решение, либо выбираешь другое из предложенных с помощью комбинаций клавиш <code>Alt + ]</code> и <code>Alt + [</code> (<code>⌥ + ]</code> и <code>⌥ + [</code> ):</p><p><img src="'+t+'" alt="image"></p><p>Для подобных довольно простых по логике модулей и компонент Codeium генерит код достаточно точно. Удобно пользоваться.</p><p>Чтобы поточнее подсказать Codeium, что тебе надо, можно сперва написать комментарий о функции, которую надо сгенерить, и затем на следующей строке использовать автокомплит.</p><h2 id="чат-бот" tabindex="-1">Чат-бот <a class="header-anchor" href="#чат-бот" aria-label="Permalink to &quot;Чат-бот&quot;">​</a></h2><p>Чат-бот для промптов есть в отдельной Codeium панели</p><h2 id="explain-refactor-jsdoc" tabindex="-1">Explain, Refactor, JSDoc <a class="header-anchor" href="#explain-refactor-jsdoc" aria-label="Permalink to &quot;Explain, Refactor, JSDoc&quot;">​</a></h2><p>Над каждой функцией Codeium позволяет совершать определенные действия:</p><p><img src="'+o+`" alt="image"></p><p>Например, <code>Refactor -&gt; Make this code strongly typed</code> с небольшими правками дает следующее на <code>listFavourites()</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Returns a list of favorite products.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Array&lt;number&gt;}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - The list of favorite product IDs.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listFavourites</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(favourites.value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Добавились типы и сгенерился JSDoc, который можно получить используя только команду <code>Generate JSDoc</code>.</p><p>Теперь если в месте использования функции мы наведем курсор на неё, получим полное описание:</p><p><img src="`+n+'" alt="image"></p><p><code>Explain</code> даёт текстовое объяснение функции:</p><blockquote><p>This code defines a function called listFavourites that returns a list of favorite product IDs. The function uses the Array.from method to convert the favourites.value array-like object into a proper array. The function has a return type annotation of Array&lt;number&gt;, indicating that it returns an array of numbers.</p></blockquote><h2 id="explain-problem" tabindex="-1">Explain problem <a class="header-anchor" href="#explain-problem" aria-label="Permalink to &quot;Explain problem&quot;">​</a></h2><p>При подчеркивании ошибки ESlint-ом Codeium часто предлагает опцию <code>Explain problem</code>, в которой будет не только объяснение ошибки, но и генерация &quot;правильного&quot; кода. С ошибками TypeScript работает очень неплохо.</p><h2 id="вывод" tabindex="-1">Вывод <a class="header-anchor" href="#вывод" aria-label="Permalink to &quot;Вывод&quot;">​</a></h2><p>Codeium - не панацея, если не умеешь программировать, но экономит много времени, если что-то умеешь.</p>',23),l=[p];function c(h,d,k,u,m,g){return s(),e("div",null,l)}const E=a(r,[["render",c]]);export{f as __pageData,E as default};
