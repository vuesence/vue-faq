import{_ as a,a as s}from"./chunks/chrome-formatter-2.CatLGT6q.js";import{_ as i,c as t,o as n,ah as r}from"./chunks/framework.CH-e-O8w.js";const g=JSON.parse('{"title":"Helpful hints","description":"","frontmatter":{},"headers":[],"relativePath":"en/development/misc.md","filePath":"en/development/misc.md","lastUpdated":1738480879000}'),o={name:"en/development/misc.md"};function l(p,e,h,d,c,m){return n(),t("div",null,e[0]||(e[0]=[r(`<h1 id="helpful-hints" tabindex="-1">Helpful hints <a class="header-anchor" href="#helpful-hints" aria-label="Permalink to &quot;Helpful hints&quot;">​</a></h1><details class="details custom-block"><summary>What are some good libraries for working with ...?</summary><h3 id="carousel-or-slider" tabindex="-1">Carousel or slider <a class="header-anchor" href="#carousel-or-slider" aria-label="Permalink to &quot;Carousel or slider&quot;">​</a></h3><p><a href="https://keen-slider.io/" target="_blank" rel="noreferrer">Keen-Slider</a>, <a href="https://www.embla-carousel.com/" target="_blank" rel="noreferrer">Embla Carousel</a>, <a href="https://splidejs.com/" target="_blank" rel="noreferrer">Splide</a></p><p>Well known <a href="https://swiperjs.com/" target="_blank" rel="noreferrer">Swiper</a> is not so good for the Vue.js</p><h3 id="toaster" tabindex="-1">Toaster <a class="header-anchor" href="#toaster" aria-label="Permalink to &quot;Toaster&quot;">​</a></h3><p><a href="https://vue-sonner.vercel.app/" target="_blank" rel="noreferrer">vue-sonner</a></p><h3 id="date-and-time" tabindex="-1">Date and time <a class="header-anchor" href="#date-and-time" aria-label="Permalink to &quot;Date and time&quot;">​</a></h3><p><a href="https://day.js.org/" target="_blank" rel="noreferrer">day.js</a>, <a href="https://date-fns.org/" target="_blank" rel="noreferrer">day-fnc.js</a></p><p>Well known <a href="https://momentjs.com/" target="_blank" rel="noreferrer">moment.js</a> is irretrievably obsolete.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Modern JavaScript is much more than it was 10 years ago. In 95% of cases the capabilities of the standard JavaScript <code>Intl</code> package are sufficient for date-time operations</p></div></details><details class="details custom-block"><summary>How to catch the moment when the user scrolls to a certain place or to make a virtual scroll?</summary><p>Intersection Observer</p></details><details class="details custom-block"><summary>i18n - application internationalization</summary><p>The NPM library for internationalization and localization i18n is very popular, but it has grown very large in recent years. It has a lot of features for localizing dates, numbers, setting the right declensions, RTL language support, downloading locales from the server and a bunch of other things. The i18next site even calls it an &quot;internationalization framework&quot;.</p><p>At the same time, localization of a site often requires very simple things that take up only a couple of percent of the entire functionality of the i18n heavyweight.</p><p>In fact, you usually need a reactive function that returns a string based on the key and the current locale.</p><p>A variant of implementation via composable is in <a href="https://www.reddit.com/r/vuejs/comments/13omkwi/detox_for_i18n/" target="_blank" rel="noreferrer">this article</a>.</p><p>Your bundle will be &quot;thinner&quot; by 50Kb.</p></details><details class="details custom-block"><summary>Options API or Composition API?</summary><p>We recommend Composition API (script setup) as more logical and convenient, in which the programmer controls the flow of program execution by means of JavaScript, and not just by setting some magic options.</p></details><details class="details custom-block"><summary>Ref or Reactive?</summary><p>Difference in terms of usage - Reactive only works with objects and does not track object replacement. Ref works with everything and tracks variable replacement:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// is OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// is NOT OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div><p>The implementations of reactive variables in Vue 2 and Vue 3 are different. Vue 2 had its own (framework) implementation of change tracking. In Vue 3, the Proxy object introduced in ES6 is used for this purpose. Because of the support for this functionality at the language level (JavaScript engine), the corresponding framework code is more efficient and simpler.</p><p>Reactive uses the Proxy object directly.</p><p>Ref on an object uses Reactive directly to track changes within the object, and creates and uses an array of variable dependencies for primitives and objects in case they are replaced.</p><p>If you want pretentious efficiency, use Reactive on objects and Ref on primitives. Otherwise, you can do everything via Ref.</p></details><details class="details custom-block"><summary>ShallowRef</summary><p>When you have an array with a large number of elements, but the data inside the array elements does not change, but only the array itself can change (adding elements, deleting, replacing the array) - use <code>ShallowRef</code>.</p><p>It works like <code>Ref</code> but does not track changes inside array elements, which gives a significant performance improvement.</p></details><details class="details custom-block"><summary>Mixins</summary><p>We should forget about them like a bad dream. Mixins as a pattern of multiple inheritance is a very bad architectural practice and should be avoided. In Vue 2, the framework itself did not have a way to make the component part of the steit and methods common, so mixins were used. In Vue 3, the Composition API has been introduced and mixins are no longer needed.</p></details><details class="details custom-block"><summary>Pug and Stylus</summary><p>In the Vue ecosystem (including development tools), these technologies are poorly supported and not recommended for use.</p></details><details class="details custom-block"><summary>Chrome DevTools custom formatters</summary><p>Google Chrome and some Chromium-based browsers have a setting in DevTools in the Console section - &quot;Enable custom formatters&quot;. Once enabled, reactive objects will be shown in the console and in popups during debugging in a more readable form:</p><p><img src="`+a+'" alt="image"></p><p>instead of the standard one:</p><p><img src="'+s+`" alt="image"></p><p>It is possible to temporarily disable the setting programmatically:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> old</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.devtoolsFormatters;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.devtoolsFormatters;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will print out data without custom formatting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.devtoolsFormatters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> old;</span></span></code></pre></div></details>`,10)]))}const f=i(o,[["render",l]]);export{g as __pageData,f as default};
