import{_ as s,c as n,o as a,ah as e}from"./chunks/framework.CH-e-O8w.js";const i="/assets/Figure_10.01_B18602.D862Q32A.jpg",r="/assets/Figure_10.02_B18602.BNHWNgE3.jpg",k=JSON.parse('{"title":"Развертывание приложения","description":"Учебник по Vue.js 3","frontmatter":{"pageClass":"textbook","head":[["meta",{"name":"og:site_name","content":"Vue.js 3 - Шаблоны проектирования и лучшие практики"}],["meta",{"name":"description","content":"Учебник по Vue.js 3"}],["meta",{"name":"og:image","content":"/images/book-face.jpg"}],["meta",{"name":"twitter:image","content":"/images/book-face.jpg"}]]},"headers":[],"relativePath":"ru/book/Chapter_10__Deploying_Your_Application.md","filePath":"ru/book/Chapter_10__Deploying_Your_Application.md","lastUpdated":1738480879000}'),o={name:"ru/book/Chapter_10__Deploying_Your_Application.md"};function l(p,t,g,h,d,c){return a(),n("div",null,t[0]||(t[0]=[e('<h1 id="развертывание-приложения" tabindex="-1">Развертывание приложения <a class="header-anchor" href="#развертывание-приложения" aria-label="Permalink to &quot;Развертывание приложения&quot;">​</a></h1><p>Работа над приложением закончилась бы печально, если бы мы не смогли опубликовать конечный продукт. Представление приложения в Интернете требует внимания к некоторым деталям и знакомства с некоторыми терминами и возможностями хостинга.</p><p>Хотя это и довольно просто, но все же требует внимания к некоторым деталям и знакомства с некоторыми терминами и возможностями хостинга.</p><p>В этой главе мы познакомимся со следующим:</p><ul><li>Что включает в себя публикация веб-приложения в Интернете</li><li>Вопросы, связанные с созданием приложения для развертывания</li><li>Знакомство с условиями и процессами регистрации домена</li><li>Настройка веб-сервера для размещения <strong>одностраничного приложения</strong> (<strong>SPA</strong>) или <strong>прогрессивного веб-приложения</strong> (<strong>PWA</strong>)</li><li>Защита сервера нашего веб-приложения с помощью Let&#39;s Encrypt</li></ul><p>Основная цель этой главы - дать вам инструменты для понимания шагов, необходимых для публикации и защиты веб-сайта и, соответственно, нашего SPA или PWA.</p><h2 id="технические-требования" tabindex="-1">Технические требования <a class="header-anchor" href="#технические-требования" aria-label="Permalink to &quot;Технические требования&quot;">​</a></h2><p>Эта глава носит в основном информационный характер, однако в качестве примеров в репозиторий книги было загружено несколько конфигурационных файлов, с которыми можно ознакомиться <a href="https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter10" target="_blank" rel="noreferrer">здесь</a>.</p><h2 id="что-включает-в-себя-публикация-веб-приложения" tabindex="-1">Что включает в себя публикация веб-приложения? <a class="header-anchor" href="#что-включает-в-себя-публикация-веб-приложения" aria-label="Permalink to &quot;Что включает в себя публикация веб-приложения?&quot;">​</a></h2><p>Публикация веб-приложения Vue 3 не сильно отличается от публикации любого другого сайта, за исключением нескольких ключевых отличий. В этой главе мы рассмотрим чистую установку, т.е. все необходимые элементы мы создадим самостоятельно. В самом общем случае нам необходимо учесть следующее:</p><ul><li>Доменное имя для нашего сайта/приложения</li><li>Путь назначения для нашего приложения</li><li>Услуга хостинга</li><li>Программное обеспечение веб-сервера</li><li>Получение сертификата безопасности</li></ul><p>Предыдущие пункты также дают нам простую формулу для подготовки. Давайте пойдем по порядку, объясняя по мере продвижения каждый необходимый термин и проблему.</p><h3 id="домены-серверы-доменных-имен-dns-и-записи-dns" tabindex="-1">Домены, серверы доменных имен (DNS) и записи DNS <a class="header-anchor" href="#домены-серверы-доменных-имен-dns-и-записи-dns" aria-label="Permalink to &quot;Домены, серверы доменных имен (DNS) и записи DNS&quot;">​</a></h3><p>Каждый компьютер, подключенный к сети, получает уникальный идентификационный адрес, отличающий его от других компьютеров в той же сети. Такие адреса называются <strong>Internet Protocol</strong> (<strong>IP</strong>), и в настоящее время их существует два - IP версий 4 и 6.</p><ul><li><strong>IPv4</strong>: Адреса состоят из четырех чисел, разделенных точкой. Диапазон чисел составляет от 0 до 255. Существует несколько зарезервированных адресов, имеющих особое значение, например <strong>127.0.0.1</strong>, который представляет собой обратную петлю к нашему собственному компьютеру. Эти адреса также могут иметь маску, определяющую подсегмент в сети. Скорее всего, в вашей домашней сети используется именно этот протокол.</li><li><strong>IPv6</strong>: Этот протокол предоставляет значительно большее адресное пространство, состоящее из восьми групп по четыре шестнадцатеричных цифры, разделенных точкой с запятой. Благодаря такому большому размеру протокол также позволяет упростить обозначения, удаляя ведущие нули и заменяя все нулевые сегменты пустым сегментом. Например, адрес loopback, эквивалентный адресу IPv4 <strong>127.0.0.1</strong> в IPv6 - это <strong>0000:0000:0000:0000:0000:0000:0000:0001</strong>, который затем можно сократить как <strong>0:0:0:0:0:0:0:1</strong> или просто <strong>::1</strong> .</li></ul><p>Есть еще много интересного о сетевых адресах, но только из этого краткого введения уже можно увидеть проблему удобства использования. Эти адреса отлично подходят для компьютеров, но не подходят для &quot;<em>человеческой памяти</em>&quot;. В огромном Интернете, с миллионами подключенных компьютеров, использование только IP-адресов для навигации было бы невозможно.</p><p>Поэтому в инфраструктуре Сети существуют специальные серверы, обеспечивающие преобразование &quot;<em>дружественного человеку имени</em>&quot; в нужный IP-адрес. Такие дружественные имена называются <strong>доменами</strong>, а серверы, обеспечивающие преобразование, - <strong>Сервисами доменных имен</strong> (<strong>DNS</strong>). Все это регулируется организацией <strong>Internet Corporation for Assigned Names and Numbers</strong> (<strong>ICANN</strong>).</p><p>Доменные имена - это то, что мы используем каждый день для доступа к любому сайту или приложению в Интернете. Они приобретаются на ограниченное время у организации, уполномоченной продавать их, называемой <strong>регистратором</strong>.</p><p>По истечении этого срока есть возможность в течение ограниченного времени продлить домен, а если нет, то он может быть приобретен любым другим лицом. Обычно домены продаются в пересчете на годы, и цены на них сильно варьируются - от нескольких центов до тысяч долларов. Домены также объединяются в группы, разделенные точками справа налево, как показано здесь:</p><p><img src="'+i+`" alt="image"></p><p>Рисунок 10.1 - Части, составляющие полное доменное имя</p><p>Домен верхнего уровня управляется ICANN, и хотя наиболее известным является <strong>.com</strong> для коммерческих сайтов, существует множество других, например, следующие:</p><ul><li><strong>.org</strong>: Для организаций</li><li><strong>.net</strong>: Для сетей или порталов корпоративных интрасетей и других организаций</li><li><strong>.mil</strong>: Для военного использования</li><li><strong>.gov</strong>: Для официальных правительственных сайтов</li></ul><p>Новые домены верхнего уровня создаются часто. С их растущим списком можно ознакомиться <a href="https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains" target="_blank" rel="noreferrer">здесь</a>.</p><p>Когда мы покупаем домен (например, <strong>mydomain</strong> на предыдущем рисунке), он привязывается к выбранному нами домену верхнего уровня. <strong>Регистраторы</strong> предоставляют нам возможность выбрать домен и проверить, доступен ли он для покупки.</p><p>Чтобы домен был полезен, он должен быть зарегистрирован в DNS и указывать на IP-адрес. Для этого необходимо создать <strong>DNS-записи</strong>, что часто делается через того же регистратора, который продает домен, или же мы можем записать в регистраторе DNS, который будет иметь целевой IP. Подробнее об этом будет сказано позже, а пока просто представьте эту концепцию в уме. Наиболее часто встречающиеся DNS-записи для домена выглядят следующим образом:</p><table tabindex="0"><thead><tr><th><strong>Тип записи (имя)</strong></th><th><strong>Значение и описание</strong></th></tr></thead><tbody><tr><td><strong>A</strong></td><td>Адрес IPv4. Это основная запись, указывающая на публичный IP-адрес вашего сервера.</td></tr><tr><td><strong>AAAA</strong></td><td>Адрес IPv6. Указывает на публичный IPv6-адрес вашего сервера.</td></tr><tr><td><strong>CNAME</strong></td><td>Создает псевдоним для домена, что позволяет направлять несколько доменов к одному адресату без создания нескольких записей A/AAAA. Это может быть использовано для создания поддоменов.</td></tr><tr><td><strong>TXT</strong></td><td>Обычная текстовая запись, которая часто используется при подтверждении права собственности на домен.</td></tr></tbody></table><p>Таблица 10.1 - Типы записей DNS.</p><p>В зависимости от регистратора и нанимаемой услуги, вы можете никогда не увидеть эти записи или не иметь с ними дела, поскольку некоторые регистраторы/веб-хостинги управляют ими автоматически.</p><p>Поддомены не нужно покупать у регистратора, их нужно только настроить. Вы можете создать сколько угодно поддоменов для своего домена. Некоторые распространенные поддомены выглядят следующим образом:</p><ul><li><strong>www</strong>: Обозначает <strong>World Wide Web</strong>, или веб-страницу. В настоящее время этот поддомен часто используется как синоним домена.</li><li><strong>app</strong>: Для приложений.</li><li><strong>admin</strong>: Для административного доступа.</li><li><strong>mail</strong>: Для служб электронной почты.</li></ul><p>Используя поддомены, можно размещать несколько сайтов на одном домене/хосте. Позже мы рассмотрим, как настроить один из них для нашего приложения на нашем веб-сервере. На данный момент необходимо помнить, что домен или поддомен будет указывать в качестве конечного адресата на ваш сервер.</p><div class="tip custom-block"><p class="custom-block-title">Примечание о loopback-адресе</p><p>Согласно предыдущим примерам, &quot;доменное&quot; имя, зарезервированное для loopback (домашнего) адреса, - <strong>localhost</strong>.</p></div><p>Домен, на котором будет размещено наше приложение, - это первый шаг к присутствию в Интернете. С ним мы переходим к следующему вопросу - где будет размещено приложение в этом домене.</p><h2 id="размышления-о-создании-приложения-для-развертывания" tabindex="-1">Размышления о создании приложения для развертывания <a class="header-anchor" href="#размышления-о-создании-приложения-для-развертывания" aria-label="Permalink to &quot;Размышления о создании приложения для развертывания&quot;">​</a></h2><p>После того как мы получили домен/поддомен, нам необходимо решить (или узнать), на каком пути будет располагаться приложение. Путь - это то, что следует за доменом, в сегментах, разделенных прямой косой чертой (<strong>/</strong>) - например, <strong>mydomain.com/store/product.html</strong>. Эти участки называются &quot;путями&quot;, поскольку они соответствуют той же структуре каталогов, что и зеркальное отображение в локальном хранилище.</p><p>Наше приложение будет обслуживаться через <strong>веб-сервер</strong>. Эти удивительные программы построены на концепции обслуживания файлов в соответствии со структурой каталогов (<strong>папка/подпапка/файл...</strong>). Внутри нашего сервера запрос домена будет соответствовать файлам в локальной директории.</p><p>Здесь нам необходимо знать, будет ли приложение Vue размещено в корне или по пути (директории), поскольку нам необходимо указать это в процессе сборки, если мы используем Vue Router в режиме веб-истории (пересмотрите главу 5, <em>Одностраничные приложения</em>, если вам необходимо освежить эту тему). В данном случае нам необходимо сделать две модификации:</p><ul><li>Указать <em>корневой</em> путь для приложения в конфигурации Router</li><li>Настроить веб-сервер на изменение службы каталогов/файлов и направлять все запросы к файлу <strong>index.html</strong></li></ul><p>Если наше приложение размещено на <strong>mydomain.com/app</strong> с использованием режима web history, то нам необходимо изменить определение роутера, передав &quot;базовый путь&quot; в функцию creator. Так, если мы рассмотрим роутер из нашего примера SPA-приложения в главе 5, <em>Одностраничные приложения</em>, то мы можем изменить его следующим образом:</p><h5 id="chapter-5-to-do-spa-src-router-index-js" tabindex="-1">/chapter 5/to-do SPA/src/router/index.js <a class="header-anchor" href="#chapter-5-to-do-spa-src-router-index-js" aria-label="Permalink to &quot;/chapter 5/to-do SPA/src/router/index.js&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createWebHistory } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue-router&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    history: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWebHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    routes,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Обратите внимание на небольшое изменение: мы передаем базовый путь в конструктор <strong>createWebHistory</strong> вместо того, чтобы использовать <strong>createWebHashHistory()</strong>.</p><p>Конечно, если приложение использует хэш-режим, то не имеет значения, где именно размещен наш путь. Это связано с тем, что в этом режиме вся навигация маршрутизации будет передаваться после хэша при указании на наш файл <strong>index.html</strong>. Например, если в нашем роутере есть маршрут <strong>/description</strong>, то при использовании режима хеширования вместо <strong>mydomain.com/app#description</strong> (режим хеширования) будет использоваться адрес <strong>mydomain.com/app/description</strong> (режим веб-истории).</p><div class="tip custom-block"><p class="custom-block-title">Хеши в веб-адресах</p><p>Хеш в адресе указывает на ссылку на раздел страницы/файла, согласно стандарту HTML, и используется Vue для управления определенными маршрутами в режиме хеша.</p></div><p>Получив целевое назначение нашего приложения, мы можем теперь собрать рабочий код через Vite, выполнив следующую команду в терминале:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>По умолчанию окончательные готовые к развертыванию файлы для всего приложения будут помещены в папку <strong>/dist</strong> (на том же уровне, что и папка <strong>/src</strong>). Теперь, получив собранные файлы дистрибутива, мы готовы загрузить их на сервер, задав соответствующую конфигурацию.</p><h2 id="опции-и-конфигурации-веб-сервера" tabindex="-1">Опции и конфигурации веб-сервера <a class="header-anchor" href="#опции-и-конфигурации-веб-сервера" aria-label="Permalink to &quot;Опции и конфигурации веб-сервера&quot;">​</a></h2><p>Когда приходит время загружать наше приложение на сервер, мы сталкиваемся с множеством вариантов, основанных на типе веб-сервера.</p><p>Эта комбинация элементов обычно называется &quot;хостинговым&quot; сервером, который включает в себя операционную систему, конфигурацию машины, тип архитектуры и, особенно, программное обеспечение веб-сервера. Ниже приведен список наиболее распространенных вариантов для каждой категории:</p><table tabindex="0"><thead><tr><th><strong>Операционная система</strong></th><th><strong>Linux</strong> <strong>или Windows</strong></th><th><strong>Для нашего приложения Vue 3 этот выбор</strong> <strong>не имеет значения</strong></th></tr></thead><tbody><tr><td><strong>Тип хостинга</strong></td><td><strong>Shared</strong></td><td>Наше приложение будет располагаться на сервере в частной области хранилища, но будет использовать все ресурсы совместно с другими приложениями. Доступ к конфигурации обычно осуществляется через веб-панель управления</td></tr><tr><td></td><td><strong>Virtual Private</strong> <strong>Server (VPS)</strong></td><td>Нам предоставляется виртуальная машина с полным доступом ко всей конфигурации и ресурсам, обычно через прямое соединение с удаленным терминалом</td></tr><tr><td></td><td><strong>Управляемый VPS</strong></td><td>Как и VPS, но нам предоставляется веб-панель управления или другие сервисы для управления машиной</td></tr><tr><td></td><td><strong>Приватный сервер</strong></td><td>Здесь мы арендуем реальное оборудование у хостинг-провайдера и имеем полную свободу доступа ко всем его ресурсам</td></tr><tr><td></td><td><strong>Самостоятельно размещаемый</strong></td><td>Мы подключаем сервер непосредственно к Интернету с помощью собственных средств и Интернет-соединения</td></tr><tr><td></td><td><strong>Коллоцированный</strong></td><td>Мы предоставляем сервер серверной ферме, где они заботятся о физических потребностях.</td></tr><tr><td><strong>Веб-сервер</strong></td><td><strong>Apache HTTP</strong></td><td>Этот сервер стабилен и широко используется в Linux и виртуальном хостинге</td></tr><tr><td></td><td><strong>Nginx</strong></td><td>Небольшой и быстрый веб-сервер, известный тем, что очень хорошо управляет большим количеством одновременных соединений, эффективно используя ресурсы. Очень прост в управлении и очень популярен для VPS-хостинга</td></tr></tbody></table><p>Таблица 10.2 - Распространенные варианты хостинга по категориям.</p><p>В случае с приложениями Vue 3 мы стремимся иметь быстрый и надежный веб-сервер, способный обслуживать несколько запросов одновременно, предоставляя статические файлы.</p><p>Нам не требуется большая вычислительная мощность процессора, поскольку мы не выполняем код на сервере, поэтому наши требования к аппаратному и программному обеспечению очень низкие, настолько, что подойдет практически любой &quot;статический файловый сервер&quot;.</p><p>Скорее всего, наше приложение будет частью гораздо более крупной инфраструктуры с другими требованиями, но те, что используются для обслуживания нашего приложения Vue 3, сами по себе невелики.</p><p>Ключевым моментом здесь опять же является то, используем ли мы режим веб-истории в нашем маршрутизаторе. В этом случае нам необходимо включить в программное обеспечение веб-сервера конфигурацию, которая будет направлять все запросы к точке входа нашего приложения Vue (нашему <strong>index.html</strong>), если запрос не соответствует стандарту (файл в каталоге папок).</p><p>Это может показаться сложным, но на самом деле все довольно просто. Прямо из официальной документации Vue Router приведены примеры двух веб-серверов.</p><h3 id="конфигурация-http-сервера-apache" tabindex="-1">Конфигурация HTTP-сервера Apache <a class="header-anchor" href="#конфигурация-http-сервера-apache" aria-label="Permalink to &quot;Конфигурация HTTP-сервера Apache&quot;">​</a></h3><p>HTTP-сервер Apache широко используется в виртуальных хостинг-провайдерах и позволяет изменять конфигурацию запросов путем размещения одного файла в корневом каталоге веб-приложения. Это очень удобно и просто, но требует, чтобы хостинг-провайдер включил (или через панель администрирования разрешил пользователю включить) специальный модуль, позволяющий переписывать входящие запросы. В <a href="https://router.vuejs.org/guide/essentials/history-mode.html" target="_blank" rel="noreferrer">официальной документации</a> приведен такой пример:</p><h5 id="htaccess" tabindex="-1">/.htaccess <a class="header-anchor" href="#htaccess" aria-label="Permalink to &quot;/.htaccess&quot;">​</a></h5><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">IfModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mod_negotiation.c&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Options -MultiViews</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">IfModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">IfModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mod_rewrite.c&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RewriteEngine On</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RewriteBase /                                   //1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RewriteRule ^index\\.html$ - [L]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RewriteCond %{REQUEST_FILENAME} !-f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RewriteCond %{REQUEST_FILENAME} !-d</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RewriteRule . /index.html [L]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">IfModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>Представленный файл следует поместить рядом с нашим файлом <strong>index.html</strong>. Тогда каждый входящий запрос будет направляться к нему и перехватываться Vue Router в режиме веб-истории. Также обратите внимание на строку <strong>//1</strong>, правило <strong>RewriteBase</strong>. Именно здесь мы меняем путь нашего приложения, если оно не размещено в корне домена.</p><h3 id="настроика-сервера-nginx" tabindex="-1">Настройка сервера Nginx <a class="header-anchor" href="#настроика-сервера-nginx" aria-label="Permalink to &quot;Настройка сервера Nginx&quot;">​</a></h3><p>В случае VPS и частных серверов сервер NGINX достаточно популярен благодаря своей гибкости и производительности. Он может выполнять функции обратного прокси, балансировщика нагрузки и многое другое.</p><p>Установка этого сервера на VPS с Linux/Windows достаточно тривиальна, но здесь мы ее рассматривать не будем. Документацию по каждой системе можно посмотреть на его <a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/install/" target="_blank" rel="noreferrer">сайте</a>.</p><p>В отличие от Apache с файлами <strong>.htaccess</strong>, нам необходимо модифицировать файл конфигурации сервера для нашего сайта. В Linux он обычно располагается в каталоге /etc/nginx/sites-available.</p><p>Файл имеет простую схему, в которой для каждого виртуального сервера мы указываем путь расположения (как в случае с доменным путем) и расположение на локальном хранилище (каталог или папка). Вот пример файла с сервера Linux:</p><h5 id="etc-nginx-sites-available-default" tabindex="-1">/etc/nginx/sites-available/default <a class="header-anchor" href="#etc-nginx-sites-available-default" aria-label="Permalink to &quot;/etc/nginx/sites-available/default&quot;">​</a></h5><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    listen 80;</span></span>
<span class="line"><span>    index index.html;</span></span>
<span class="line"><span>    root /home/user/www;                        //1</span></span>
<span class="line"><span>    server_name www.mydomain.com mydomain.com;  //2</span></span>
<span class="line"><span>    location / {                                //3</span></span>
<span class="line"><span>        try_files $uri $uri/ /index.html;       //4</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Рассмотрим предыдущий код:</p><ul><li>В строке <em>//1</em> мы размещаем абсолютный путь локального хранилища к нашему приложению.</li><li>В строке <em>//2</em> мы объявляем домены и поддомены, которые будут связаны с этим серверным блоком.</li><li>В строке <em>//3,</em> мы объявляем путь расположения для обработки. В данном примере мы размещаем приложение в корне (<strong>/</strong>). При размещении в <strong>mydomain.com/app</strong> мы бы написали <strong>location /app</strong> .</li><li>И наконец, в строке <em>//4,</em> мы указываем NGINX попытаться найти корректный каталог/файл и, если это не удается, передать его в наш файл <strong>index.html</strong> .</li></ul><p>Как и ранее, если мы используем режим web hash, то нам не нужно делать эти изменения. Мы можем просто использовать конфигурацию по умолчанию для обслуживания файлов с диска.</p><h3 id="другие-серверы" tabindex="-1">Другие серверы <a class="header-anchor" href="#другие-серверы" aria-label="Permalink to &quot;Другие серверы&quot;">​</a></h3><p>Существует множество других используемых серверов и возможных конфигураций, которые невозможно рассмотреть здесь. Однако в официальной документации Vue Router есть очень хорошие примеры для других серверов и рекомендации для тех, которые не рассматриваются. Ссылку можно найти по этой <a href="https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations" target="_blank" rel="noreferrer">ссылке</a>.</p><p>Давайте посмотрим, как перенести наши файлы на наш онлайн-сервер.</p><h2 id="перенос-фаилов-на-сервер" tabindex="-1">Перенос файлов на сервер <a class="header-anchor" href="#перенос-фаилов-на-сервер" aria-label="Permalink to &quot;Перенос файлов на сервер&quot;">​</a></h2><p>Теперь, когда домен указывает на наш сервер, а конфигурация настроена, пришло время загрузить файлы дистрибутива. В зависимости от выбранного хостинга это можно сделать через веб-интерфейс, приложение <strong>File Transfer Protocol</strong> (<strong>FTP</strong>) или безопасную передачу по протоколу <strong>Secure Shell Protocol</strong> (<strong>SSH</strong>).</p><p>Для последних двух вариантов рекомендуется использовать приложение, которое возьмет на себя всю тяжесть работы. Отличным вариантом является использование <a href="https://filezilla-project.org/" target="_blank" rel="noreferrer">FileZilla</a>, которая работает с вышеупомянутымипротоколами. Она доступна для Linux, Windows и macOS.</p><p>Как мы уже упоминали в главе 9, <em>Тестирование и контроль исходного кода</em>, вы также можете настроить свой VPS-сервер на получение исходного кода из удаленного репозитория с помощью <strong>Git</strong>. В этом случае папка приложения будет настроена на указание на папку <strong>/dist</strong> в локальном репозитории.</p><p>Мы можем, например, открыть удаленный терминал на сервере, запустить синхронизацию (pull), а затем скомпилировать приложение на самом сервере, взять ветку с уже скомпилированным приложением, отправить наши коммиты непосредственно на сервер и так далее.</p><p>Существует множество вариантов использования Git, и еще больше - при использовании таких сервисов, как <strong>GitHub</strong> или <strong>GitLab</strong> с мощными инструментами для <em>непрерывной интеграции и доставки</em>.</p><p>Эту тему стоит изучить, если вы не хотите использовать S/FTP-приложения или хотите автоматизировать процесс. Каждая реализация будет специфичной и не входит в рамки данной книги, поэтому мы перейдем к следующей теме, предполагая, что наши файлы теперь находятся на сервере.</p><h2 id="защита-веб-приложения-с-помощью-let-s-encrypt" tabindex="-1">Защита веб-приложения с помощью Let&#39;s Encrypt <a class="header-anchor" href="#защита-веб-приложения-с-помощью-let-s-encrypt" aria-label="Permalink to &quot;Защита веб-приложения с помощью Let&#39;s Encrypt&quot;">​</a></h2><p>Интернет-адреса указываются в самом начале используемого протокола. По умолчанию вся веб-навигация осуществляется с помощью протокола <strong>Hypertext Transfer Protocol</strong> (<strong>HTTP</strong>), который, хотя и является основополагающим, не считается безопасным.</p><p>Если между клиентом и сервером предусмотрен уровень шифрования, то обмен данными осуществляется по протоколу <strong>HTTPS</strong> (буква <strong>S</strong> означает <strong>Secure</strong>). Этот уровень шифрования обеспечивается и подтверждается сертифицирующим органом, поэтому сертификат должен быть приобретен именно у него.</p><p>Хостинг-провайдеры обычно предлагают купить и установить такой сертификат на своих серверах, однако существует и бесплатная и надежная альтернатива, предоставляемая фондом <strong><a href="https://letsencrypt.org/" target="_blank" rel="noreferrer">Let&#39;s Encrypt</a></strong>.</p><p>Для установки сертификата <em>Let&#39;s Encrypt</em> необходим SSH доступ к серверу. Если его нет, то приходится полагаться на услугу, предоставляемую хостингом. Список совместимых сертифицированных хостинг-провайдеров находится <a href="https://certbot.eff.org/hosting_providers" target="_blank" rel="noreferrer">здесь</a>.</p><p>В том случае, если мы имеем доступ к серверу через удаленный SSH доступ, процесс также несложен. Фонд Let&#39;s Encrypt и <strong>Electronic Frontier Foundation</strong> (<strong>EFF</strong>) предоставляют приложение <strong>certbot</strong> (робот сертификации), которое автоматизирует установку сертификатов безопасности, а также настраивает файлы локального веб-сервера на использование HTTPS. В данном случае у нас есть два варианта:</p><ul><li>Установить сертификат для каждого домена и каждого поддомена</li><li>Установить <em>общий (wild) сертификат</em>, который охватывает каждый домен и все возможные поддомены</li></ul><p>Инструкции по установке <em>certbot</em> и последующему запуску процесса отличаются для каждой операционной системы и веб-сервера, а также для типа упомянутого сертификата. В связи с этим EFF предоставляет веб-страницу с настраиваемыми опциями для каждого возможного варианта и простыми для выполнения шагами. Мастер можно найти <a href="https://certbot.eff.org/" target="_blank" rel="noreferrer">здесь</a>.</p><p><img src="`+r+'" alt="image"></p><p>Рисунок 10.2 - Инструкции Certbot для NGINX и Ubuntu 20.</p><p>В целом, инструкция состоит из следующих шагов:</p><ol><li>Установите <strong>certbot</strong> .</li><li>Запустите <strong>certbot</strong>. В результате появится ряд опций, содержащих все найденные домены на данном веб-сервере.</li><li>Выберите тип сертификата для установки.</li><li>Выберите, если активно, автообновление сертификата. Отказ от этой опции приведет к необходимости ручного обновления.</li></ol><p>Бесплатный сертификат действует только 3 месяца единовременно, в отличие от коммерческого сертификата, который можно купить на больший срок. По истечении 3 месяцев его необходимо вручную продлевать. К счастью, в <em>certbot</em> включена функция автоматического обновления до истечения срока действия.</p><p>Даже для простых тестовых приложений важно и рекомендуется всегда защищать сайт с помощью сертификата безопасности. Не будем также забывать, что наличие сертификата безопасности и обслуживание приложения по HTTPS является жестким требованием для PWA.</p><h2 id="подведение-итогов" tabindex="-1">Подведение итогов <a class="header-anchor" href="#подведение-итогов" aria-label="Permalink to &quot;Подведение итогов&quot;">​</a></h2><p>В этой главе мы рассмотрели основы публикации нашего Vue-приложения в собственном открытом пространстве в Интернете. Мы также познакомились с важными концепциями понимания инструкций при покупке и резервировании домена и настройке DNS-записей, если и когда это необходимо сделать.</p><p>Мы также узнали о том, как приспособить конфигурацию нашего пакета при использовании режима истории HTML5 в Vue Router, о различных типах онлайн-хостинга, которые мы можем арендовать, о вариантах копирования файлов дистрибутива на рабочий сервер и о рекомендациях по защите нашего сайта с помощью бесплатного сертификата Let&#39;s Encrypt для обслуживания наших приложений по протоколу HTTPS. Всё это важные навыки, и вам будет полезно хотя бы раз получить опыт их применения.</p><p>После развертывания нашего приложения мы рассмотрели в этой книге основные этапы и темы создания приложения Vue 3, начиная с знакомства с фреймворком и заканчивая тестированием отдельных компонентов и установкой готовых к производству файлов на веб-сервер.</p><h2 id="вопросы-для-проверки" tabindex="-1">Вопросы для проверки <a class="header-anchor" href="#вопросы-для-проверки" aria-label="Permalink to &quot;Вопросы для проверки&quot;">​</a></h2><ul><li>Что такое домен верхнего уровня и чем он отличается от домена?</li><li>Существует ли ограничение на количество поддоменов, которые мы можем создать для нашего домена? Почему?</li><li>Что такое DNS? Что такое DNS-записи?</li><li>Какие существуют варианты публикации веб-приложения в Интернете?</li><li>Какие изменения необходимо внести в код и веб-сервер при использовании Vue Router в режиме веб-истории?</li><li>Какие распространенные веб-серверы используются в виртуальном хостинге и VPS?</li><li>Что такое certbot и что он делает?</li></ul>',103)]))}const m=s(o,[["render",l]]);export{k as __pageData,m as default};
