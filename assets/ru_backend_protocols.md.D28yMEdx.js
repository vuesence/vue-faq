import{_ as e,o as t,c as a,a4 as r}from"./chunks/framework.B8KxSsRZ.js";const S=JSON.parse('{"title":"Протоколы. To REST или не REST?","description":"","frontmatter":{},"headers":[],"relativePath":"ru/backend/protocols.md","filePath":"ru/backend/protocols.md","lastUpdated":1728438071000}'),s={name:"ru/backend/protocols.md"},o=r('<h1 id="протоколы-to-rest-или-не-rest" tabindex="-1">Протоколы. To REST или не REST? <a class="header-anchor" href="#протоколы-to-rest-или-не-rest" aria-label="Permalink to &quot;Протоколы. To REST или не REST?&quot;">​</a></h1><details class="details custom-block"><summary>REST, WebSockets, JSON-RPC</summary><p>Для новичка, конечно, удобнее начинать с <code>REST</code> - запросы на сервер абы как.</p><p>Для более опытных, особенно, фулстеков, предлагаю взглянуть на <code>JSON-RPC</code></p><p><code>WebSockets</code> удобен тем, что дает двунаправленную связь (сервер может посылать сообщения на клиент), но требует специального программного обеспечения на бэкенде.</p></details><details class="details custom-block"><summary>Почему JSON-RPC?</summary><p>После опыта с JSON-RPC общение с бэком обычно уже никогда не бывает прежним.</p><p>Он дает порядок, четкость, строгость и вместе с тем гибкость. Сильно упрощает и делает понятным код как на фронте, так и на бэке.</p><p>Кроме того, JSON-RPC - де-факто стандарт для Web 3.0 коммуникаций.</p><p>Вот две мои статьи на эту тему - <a href="https://habr.com/ru/articles/709362/" target="_blank" rel="noreferrer">Популяризация JSON-RPC (часть 1)</a> и <a href="https://habr.com/ru/articles/710652/" target="_blank" rel="noreferrer">Популяризация JSON-RPC (часть 2)</a></p><p>Вариант TypeScript реализации фронтэнд api сервиса на JSON-RPC - <a href="https://github.com/vuesence/vue-webapp/blob/main/src/services/api/jsonrpc.ts" target="_blank" rel="noreferrer">здесь</a></p><p>При использовании <code>JSON-RPC</code> переход на <code>WebSockets</code> или другие транспортные протоколы не вызовет никаких трудностей из-за унификации формата сообщений.</p></details><details class="details custom-block"><summary>Как организовать реконнект WebSocket соединения на фронте?</summary><p>Нужна шина, или <code>Еvent bus</code>, которая будет работать как прокси для приходящих сообщений.</p><p>Можно использовать <a href="https://github.com/developit/mitt" target="_blank" rel="noreferrer">mitt</a>.</p></details><details class="details custom-block"><summary>Что такое GraphQL?</summary><p>Сложная штука, попытка перевести язык запросов SQL для клиент-серверных запросов в интернете.</p><p>Имеет довольно специфичное применение, преимущественно у сторонних поставщиков данных через API.</p><p>Для своего фулстек приложения - на 99% ненужное решение.</p></details>',5),c=[o];function p(l,d,i,m,n,_){return t(),a("div",null,c)}const b=e(s,[["render",p]]);export{S as __pageData,b as default};
